services:
  db:
    image: "registry.access.redhat.com/rhel8/postgresql-16:latest"
    volumes:
      - "/var/lib/pgsql/data"
    env_file: 
      - path: "./.env"
        required: true
    environment:
      - POSTGRESQL_ADMIN_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rhdh:
    image: ${RHDH_IMAGE}
    env_file: 
      - path: "./.env"
        required: true
    user: "1001"
    entrypoint:
      - "/opt/app-root/src/wait-for-plugins.sh"
    ports:
      - "7007:7007"
    volumes:
      - type: bind
        source: "./wait-for-plugins.sh"
        target: "/opt/app-root/src/wait-for-plugins.sh"
        bind:
          selinux: "Z"
      - type: bind
        source: "./configs"
        target: "/opt/app-root/src/configs"
        bind:
          selinux: "Z"
      - type: volume
        source: dynamic-plugins-root
        target: /opt/app-root/src/dynamic-plugins-root
        volume:
          nocopy: true
    depends_on:
      db:
        condition: service_healthy
      install-dynamic-plugins:
        condition: service_completed_successfully

  install-dynamic-plugins:
    image: ${RHDH_IMAGE}
    # docker compose volumes are owned by root, so we need to run as root to write to them
    #Â this is ok, as files are world readable
    user: "root"
    entrypoint:
      - ./install-dynamic-plugins.sh
      - /dynamic-plugins-root
    env_file: 
      - path: "./.env"
        required: true
    volumes:
      - type: bind
        source: "./configs"
        target: "/opt/app-root/src/configs"
        bind:
          selinux: "Z"
      - type: bind
        source: "./configs/dynamic-plugins.yaml"
        target: "/opt/app-root/src/dynamic-plugins.yaml"
        bind:
          selinux: "Z"
      - type: volume
        source: dynamic-plugins-root
        target: /dynamic-plugins-root
        volume:
          nocopy: true

volumes:
  dynamic-plugins-root:
