{"version":3,"file":"authenticate.cjs.js","sources":["../../src/lib/authenticate.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport KeycloakAdminClient from '@keycloak/keycloak-admin-client';\nimport { KeycloakProviderConfig } from './config';\nimport { Credentials } from '@keycloak/keycloak-admin-client/lib/utils/auth';\nimport { InputError } from '@backstage/errors';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport jwt from 'jsonwebtoken';\n\nlet refreshTokenPromise: Promise<void> | null = null;\n\nexport async function ensureTokenValid(\n  kcAdminClient: KeycloakAdminClient,\n  provider: KeycloakProviderConfig,\n  logger: LoggerService,\n) {\n  if (!kcAdminClient.accessToken) {\n    await authenticate(kcAdminClient, provider, logger);\n  } else {\n    // returns null if token is not a JWT, string if payload is empty string, object if payload is a valid JSON\n    const decodedToken = jwt.decode(kcAdminClient.accessToken);\n    if (decodedToken && typeof decodedToken === 'object' && decodedToken.exp) {\n      const tokenExpiry = decodedToken.exp * 1000; // Convert to milliseconds\n      const now = Date.now();\n\n      if (now > tokenExpiry - 30000) {\n        refreshTokenPromise = authenticate(\n          kcAdminClient,\n          provider,\n          logger,\n        ).finally(() => {\n          refreshTokenPromise = null;\n        });\n      }\n      await refreshTokenPromise;\n    }\n  }\n}\n\nexport async function authenticate(\n  kcAdminClient: KeycloakAdminClient,\n  provider: KeycloakProviderConfig,\n  logger: LoggerService,\n) {\n  try {\n    let credentials: Credentials;\n    if (provider.username && provider.password) {\n      credentials = {\n        grantType: 'password',\n        clientId: provider.clientId ?? 'admin-cli',\n        username: provider.username,\n        password: provider.password,\n      };\n    } else if (provider.clientId && provider.clientSecret) {\n      credentials = {\n        grantType: 'client_credentials',\n        clientId: provider.clientId,\n        clientSecret: provider.clientSecret,\n      };\n    } else {\n      throw new InputError(\n        `username and password or clientId and clientSecret must be provided.`,\n      );\n    }\n    await kcAdminClient.auth(credentials);\n  } catch (error) {\n    logger.error('Failed to authenticate', error.message);\n    throw error;\n  }\n}\n"],"names":["jwt","InputError"],"mappings":";;;;;;;;;AAsBA,IAAI,mBAA4C,GAAA,IAAA;AAE1B,eAAA,gBAAA,CACpB,aACA,EAAA,QAAA,EACA,MACA,EAAA;AACA,EAAI,IAAA,CAAC,cAAc,WAAa,EAAA;AAC9B,IAAM,MAAA,YAAA,CAAa,aAAe,EAAA,QAAA,EAAU,MAAM,CAAA;AAAA,GAC7C,MAAA;AAEL,IAAA,MAAM,YAAe,GAAAA,oBAAA,CAAI,MAAO,CAAA,aAAA,CAAc,WAAW,CAAA;AACzD,IAAA,IAAI,YAAgB,IAAA,OAAO,YAAiB,KAAA,QAAA,IAAY,aAAa,GAAK,EAAA;AACxE,MAAM,MAAA,WAAA,GAAc,aAAa,GAAM,GAAA,GAAA;AACvC,MAAM,MAAA,GAAA,GAAM,KAAK,GAAI,EAAA;AAErB,MAAI,IAAA,GAAA,GAAM,cAAc,GAAO,EAAA;AAC7B,QAAsB,mBAAA,GAAA,YAAA;AAAA,UACpB,aAAA;AAAA,UACA,QAAA;AAAA,UACA;AAAA,SACF,CAAE,QAAQ,MAAM;AACd,UAAsB,mBAAA,GAAA,IAAA;AAAA,SACvB,CAAA;AAAA;AAEH,MAAM,MAAA,mBAAA;AAAA;AACR;AAEJ;AAEsB,eAAA,YAAA,CACpB,aACA,EAAA,QAAA,EACA,MACA,EAAA;AACA,EAAI,IAAA;AACF,IAAI,IAAA,WAAA;AACJ,IAAI,IAAA,QAAA,CAAS,QAAY,IAAA,QAAA,CAAS,QAAU,EAAA;AAC1C,MAAc,WAAA,GAAA;AAAA,QACZ,SAAW,EAAA,UAAA;AAAA,QACX,QAAA,EAAU,SAAS,QAAY,IAAA,WAAA;AAAA,QAC/B,UAAU,QAAS,CAAA,QAAA;AAAA,QACnB,UAAU,QAAS,CAAA;AAAA,OACrB;AAAA,KACS,MAAA,IAAA,QAAA,CAAS,QAAY,IAAA,QAAA,CAAS,YAAc,EAAA;AACrD,MAAc,WAAA,GAAA;AAAA,QACZ,SAAW,EAAA,oBAAA;AAAA,QACX,UAAU,QAAS,CAAA,QAAA;AAAA,QACnB,cAAc,QAAS,CAAA;AAAA,OACzB;AAAA,KACK,MAAA;AACL,MAAA,MAAM,IAAIC,iBAAA;AAAA,QACR,CAAA,oEAAA;AAAA,OACF;AAAA;AAEF,IAAM,MAAA,aAAA,CAAc,KAAK,WAAW,CAAA;AAAA,WAC7B,KAAO,EAAA;AACd,IAAO,MAAA,CAAA,KAAA,CAAM,wBAA0B,EAAA,KAAA,CAAM,OAAO,CAAA;AACpD,IAAM,MAAA,KAAA;AAAA;AAEV;;;;;"}