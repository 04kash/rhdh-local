{"version":3,"file":"config.cjs.js","sources":["../../src/lib/config.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readSchedulerServiceTaskScheduleDefinitionFromConfig } from '@backstage/backend-plugin-api';\nimport type { SchedulerServiceTaskScheduleDefinition } from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport { InputError } from '@backstage/errors';\n\n/**\n * The configuration parameters for a single Keycloak provider.\n *\n * @public\n */\nexport type KeycloakProviderConfig = {\n  /**\n   * Identifier of the provider which will be used i.e. at the location key for ingested entities.\n   */\n  id: string;\n\n  /**\n   * The Keycloak base URL\n   */\n  baseUrl: string;\n\n  /**\n   * The username to use for authenticating requests\n   * If specified, password must also be specified\n   */\n  username?: string;\n\n  /**\n   * The password to use for authenticating requests\n   * If specified, username must also be specified\n   */\n  password?: string;\n\n  /**\n   * The clientId to use for authenticating requests\n   * If specified, clientSecret must also be specified\n   */\n  clientId?: string;\n\n  /**\n   * The clientSecret to use for authenticating requests\n   * If specified, clientId must also be specified\n   */\n  clientSecret?: string;\n\n  /**\n   * name of the Keycloak realm\n   */\n  realm: string;\n\n  /**\n   * name of the Keycloak login realm\n   */\n  loginRealm?: string;\n\n  /**\n   * Schedule configuration for refresh tasks.\n   */\n  schedule?: SchedulerServiceTaskScheduleDefinition;\n\n  /**\n   * The number of users to query at a time.\n   * @defaultValue 100\n   * @remarks\n   * This is a performance optimization to avoid querying too many users at once.\n   * @see https://www.keycloak.org/docs-api/11.0/rest-api/index.html#_users_resource\n   */\n  userQuerySize?: number;\n\n  /**\n   * The number of groups to query at a time.\n   * @defaultValue 100\n   * @remarks\n   * This is a performance optimization to avoid querying too many groups at once.\n   * @see https://www.keycloak.org/docs-api/11.0/rest-api/index.html#_groups_resource\n   */\n  groupQuerySize?: number;\n\n  /**\n   * Maximum request concurrency to prevent DoS attacks on the Keycloak server.\n   */\n  maxConcurrency?: number;\n\n  /**\n   * Whether the API call will return a brief representation for groups and users or not. Defaults to true.\n   * A complete representation will include additional attributes\n   * @defaultValue true\n   */\n  briefRepresentation?: boolean;\n};\n\nconst readProviderConfig = (\n  id: string,\n  providerConfigInstance: Config,\n): KeycloakProviderConfig => {\n  const baseUrl = providerConfigInstance.getString('baseUrl');\n  const realm = providerConfigInstance.getOptionalString('realm') ?? 'master';\n  const loginRealm =\n    providerConfigInstance.getOptionalString('loginRealm') ?? 'master';\n  const username = providerConfigInstance.getOptionalString('username');\n  const password = providerConfigInstance.getOptionalString('password');\n  const clientId = providerConfigInstance.getOptionalString('clientId');\n  const clientSecret = providerConfigInstance.getOptionalString('clientSecret');\n  const userQuerySize =\n    providerConfigInstance.getOptionalNumber('userQuerySize');\n  const groupQuerySize =\n    providerConfigInstance.getOptionalNumber('groupQuerySize');\n  const maxConcurrency =\n    providerConfigInstance.getOptionalNumber('maxConcurrency');\n  const briefRepresentation = providerConfigInstance.getOptionalBoolean(\n    'briefRepresentation',\n  );\n\n  if (clientId && !clientSecret) {\n    throw new InputError(\n      `clientSecret must be provided when clientId is defined.`,\n    );\n  }\n\n  if (clientSecret && !clientId) {\n    throw new InputError(\n      `clientId must be provided when clientSecret is defined.`,\n    );\n  }\n\n  if (username && !password) {\n    throw new InputError(`password must be provided when username is defined.`);\n  }\n\n  if (password && !username) {\n    throw new InputError(`username must be provided when password is defined.`);\n  }\n\n  const schedule = providerConfigInstance.has('schedule')\n    ? readSchedulerServiceTaskScheduleDefinitionFromConfig(\n        providerConfigInstance.getConfig('schedule'),\n      )\n    : undefined;\n\n  return {\n    id,\n    baseUrl,\n    loginRealm,\n    realm,\n    username,\n    password,\n    clientId,\n    clientSecret,\n    schedule,\n    userQuerySize,\n    groupQuerySize,\n    maxConcurrency,\n    briefRepresentation,\n  };\n};\n\nexport const readProviderConfigs = (\n  config: Config,\n): KeycloakProviderConfig[] => {\n  const providersConfig = config.getOptionalConfig(\n    'catalog.providers.keycloakOrg',\n  );\n  if (!providersConfig) {\n    return [];\n  }\n  return providersConfig.keys().map(id => {\n    const providerConfigInstance = providersConfig.getConfig(id);\n    return readProviderConfig(id, providerConfigInstance);\n  });\n};\n"],"names":["InputError","readSchedulerServiceTaskScheduleDefinitionFromConfig"],"mappings":";;;;;AA2GA,MAAM,kBAAA,GAAqB,CACzB,EAAA,EACA,sBAC2B,KAAA;AAC3B,EAAM,MAAA,OAAA,GAAU,sBAAuB,CAAA,SAAA,CAAU,SAAS,CAAA;AAC1D,EAAA,MAAM,KAAQ,GAAA,sBAAA,CAAuB,iBAAkB,CAAA,OAAO,CAAK,IAAA,QAAA;AACnE,EAAA,MAAM,UACJ,GAAA,sBAAA,CAAuB,iBAAkB,CAAA,YAAY,CAAK,IAAA,QAAA;AAC5D,EAAM,MAAA,QAAA,GAAW,sBAAuB,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpE,EAAM,MAAA,QAAA,GAAW,sBAAuB,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpE,EAAM,MAAA,QAAA,GAAW,sBAAuB,CAAA,iBAAA,CAAkB,UAAU,CAAA;AACpE,EAAM,MAAA,YAAA,GAAe,sBAAuB,CAAA,iBAAA,CAAkB,cAAc,CAAA;AAC5E,EAAM,MAAA,aAAA,GACJ,sBAAuB,CAAA,iBAAA,CAAkB,eAAe,CAAA;AAC1D,EAAM,MAAA,cAAA,GACJ,sBAAuB,CAAA,iBAAA,CAAkB,gBAAgB,CAAA;AAC3D,EAAM,MAAA,cAAA,GACJ,sBAAuB,CAAA,iBAAA,CAAkB,gBAAgB,CAAA;AAC3D,EAAA,MAAM,sBAAsB,sBAAuB,CAAA,kBAAA;AAAA,IACjD;AAAA,GACF;AAEA,EAAI,IAAA,QAAA,IAAY,CAAC,YAAc,EAAA;AAC7B,IAAA,MAAM,IAAIA,iBAAA;AAAA,MACR,CAAA,uDAAA;AAAA,KACF;AAAA;AAGF,EAAI,IAAA,YAAA,IAAgB,CAAC,QAAU,EAAA;AAC7B,IAAA,MAAM,IAAIA,iBAAA;AAAA,MACR,CAAA,uDAAA;AAAA,KACF;AAAA;AAGF,EAAI,IAAA,QAAA,IAAY,CAAC,QAAU,EAAA;AACzB,IAAM,MAAA,IAAIA,kBAAW,CAAqD,mDAAA,CAAA,CAAA;AAAA;AAG5E,EAAI,IAAA,QAAA,IAAY,CAAC,QAAU,EAAA;AACzB,IAAM,MAAA,IAAIA,kBAAW,CAAqD,mDAAA,CAAA,CAAA;AAAA;AAG5E,EAAA,MAAM,QAAW,GAAA,sBAAA,CAAuB,GAAI,CAAA,UAAU,CAClD,GAAAC,qEAAA;AAAA,IACE,sBAAA,CAAuB,UAAU,UAAU;AAAA,GAE7C,GAAA,SAAA;AAEJ,EAAO,OAAA;AAAA,IACL,EAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA;AAAA,IACA,KAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,YAAA;AAAA,IACA,QAAA;AAAA,IACA,aAAA;AAAA,IACA,cAAA;AAAA,IACA,cAAA;AAAA,IACA;AAAA,GACF;AACF,CAAA;AAEa,MAAA,mBAAA,GAAsB,CACjC,MAC6B,KAAA;AAC7B,EAAA,MAAM,kBAAkB,MAAO,CAAA,iBAAA;AAAA,IAC7B;AAAA,GACF;AACA,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAA,OAAO,EAAC;AAAA;AAEV,EAAA,OAAO,eAAgB,CAAA,IAAA,EAAO,CAAA,GAAA,CAAI,CAAM,EAAA,KAAA;AACtC,IAAM,MAAA,sBAAA,GAAyB,eAAgB,CAAA,SAAA,CAAU,EAAE,CAAA;AAC3D,IAAO,OAAA,kBAAA,CAAmB,IAAI,sBAAsB,CAAA;AAAA,GACrD,CAAA;AACH;;;;"}