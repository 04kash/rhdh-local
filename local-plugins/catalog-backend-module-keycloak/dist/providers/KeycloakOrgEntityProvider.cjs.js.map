{"version":3,"file":"KeycloakOrgEntityProvider.cjs.js","sources":["../../src/providers/KeycloakOrgEntityProvider.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  AuthService,\n  DiscoveryService,\n  LoggerService,\n  SchedulerService,\n  SchedulerServiceTaskRunner,\n} from '@backstage/backend-plugin-api';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  GroupEntity,\n  UserEntity,\n  type Entity,\n} from '@backstage/catalog-model';\nimport type { Config } from '@backstage/config';\nimport { InputError, isError, NotFoundError } from '@backstage/errors';\nimport type {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\n\n// @ts-ignore\nimport { merge } from 'lodash';\nimport { LimitFunction } from 'p-limit';\nimport * as uuid from 'uuid';\n\nimport {\n  GroupTransformer,\n  KEYCLOAK_ID_ANNOTATION,\n  KeycloakProviderConfig,\n  UserTransformer,\n} from '../lib';\nimport { readProviderConfigs } from '../lib/config';\nimport {\n  getAllGroups,\n  getServerVersion,\n  parseGroup,\n  parseUser,\n  processGroupsRecursively,\n  readKeycloakRealm,\n  traverseGroups,\n} from '../lib/read';\nimport { authenticate, ensureTokenValid } from '../lib/authenticate';\nimport { Attributes, Counter, Meter, metrics } from '@opentelemetry/api';\nimport { EventsService } from '@backstage/plugin-events-node';\nimport KeycloakAdminClient from '@keycloak/keycloak-admin-client';\nimport { CatalogApi, CatalogClient } from '@backstage/catalog-client';\nimport {\n  GroupRepresentationWithParent,\n  GroupRepresentationWithParentAndEntity,\n} from '../lib/types';\nimport { getAllGroupMembers } from '../lib/read';\nimport GroupRepresentation from '@keycloak/keycloak-admin-client/lib/defs/groupRepresentation';\nimport {\n  KEYCLOAK_BRIEF_REPRESENTATION_DEFAULT,\n  KEYCLOAK_REALM_ANNOTATION,\n} from '../lib/constants';\nimport { noopUserTransformer } from '../lib/transformers';\nimport { Groups } from '@keycloak/keycloak-admin-client/lib/resources/groups';\n\n/**\n * Options for {@link KeycloakOrgEntityProvider}.\n *\n * @public\n */\nexport interface KeycloakOrgEntityProviderOptions {\n  /**\n   * A unique, stable identifier for this provider.\n   *\n   * @example \"production\"\n   */\n  id: string;\n\n  /**\n   * The refresh schedule to use.\n   * @remarks\n   *\n   * You can pass in the result of\n   * {@link @backstage/backend-plugin-api#SchedulerService.createScheduledTaskRunner}\n   * to enable automatic scheduling of tasks.\n   */\n  schedule?: SchedulerServiceTaskRunner;\n\n  /**\n   * Scheduler used to schedule refreshes based on\n   * the schedule config.\n   */\n  scheduler?: SchedulerService;\n\n  /**\n   * The logger to use.\n   */\n  logger: LoggerService;\n\n  /**\n   * The function that transforms a user entry in LDAP to an entity.\n   */\n  userTransformer?: UserTransformer;\n\n  /**\n   * The function that transforms a group entry in LDAP to an entity.\n   */\n  groupTransformer?: GroupTransformer;\n}\n\n// Makes sure that emitted entities have a proper location\nexport const withLocations = (\n  baseUrl: string,\n  realm: string,\n  entity: Entity,\n): Entity => {\n  const kind = entity.kind === 'Group' ? 'groups' : 'users';\n  const location = `url:${baseUrl}/admin/realms/${realm}/${kind}/${entity.metadata.annotations?.[KEYCLOAK_ID_ANNOTATION]}`;\n  return merge(\n    {\n      metadata: {\n        annotations: {\n          [ANNOTATION_LOCATION]: location,\n          [ANNOTATION_ORIGIN_LOCATION]: location,\n        },\n      },\n    },\n    entity,\n  ) as Entity;\n};\n\nconst TOPIC_USER_CREATE = 'admin.USER-CREATE';\nconst TOPIC_USER_DELETE = 'admin.USER-DELETE';\nconst TOPIC_USER_UPDATE = 'admin.USER-UPDATE';\nconst TOPIC_USER_ADD_GROUP = 'admin.GROUP_MEMBERSHIP-CREATE';\nconst TOPIC_USER_REMOVE_GROUP = 'admin.GROUP_MEMBERSHIP-DELETE';\nconst TOPIC_GROUP_CREATE = 'admin.GROUP-CREATE';\nconst TOPIC_GROUP_DELETE = 'admin.GROUP-DELETE';\nconst TOPIC_GROUP_UPDATE = 'admin.GROUP-UPDATE';\n\n/**\n * Ingests org data (users and groups) from Keycloak.\n *\n * @public\n */\nexport class KeycloakOrgEntityProvider implements EntityProvider {\n  private connection?: EntityProviderConnection;\n  private meter: Meter;\n  private counter: Counter<Attributes>;\n  private scheduleFn?: () => Promise<void>;\n  private readonly events?: EventsService;\n  private readonly catalogApi: CatalogApi;\n\n  /**\n   * Static builder method to create multiple KeycloakOrgEntityProvider instances from a single config.\n   * @param deps - The dependencies required for the provider, including the configuration and logger.\n   * @param options - Options for scheduling tasks and transforming users and groups.\n   * @returns An array of KeycloakOrgEntityProvider instances.\n   */\n  static fromConfig(\n    deps: {\n      config: Config;\n      logger: LoggerService;\n      catalogApi?: CatalogApi;\n      events?: EventsService;\n      auth: AuthService;\n      discovery: DiscoveryService;\n    },\n    options: (\n      | { schedule: SchedulerServiceTaskRunner }\n      | { scheduler: SchedulerService }\n    ) & {\n      userTransformer?: UserTransformer;\n      groupTransformer?: GroupTransformer;\n    },\n  ): KeycloakOrgEntityProvider[] {\n    const { config, logger, catalogApi, events, auth, discovery } = deps;\n    return readProviderConfigs(config).map(providerConfig => {\n      let taskRunner: SchedulerServiceTaskRunner | string;\n      if ('scheduler' in options && providerConfig.schedule) {\n        // Create a scheduled task runner using the provided scheduler and schedule configuration\n        taskRunner = options.scheduler.createScheduledTaskRunner(\n          providerConfig.schedule,\n        );\n      } else if ('schedule' in options) {\n        // Use the provided schedule directly\n        taskRunner = options.schedule;\n      } else {\n        throw new InputError(\n          `No schedule provided via config for KeycloakOrgEntityProvider:${providerConfig.id}.`,\n        );\n      }\n\n      const provider = new KeycloakOrgEntityProvider({\n        id: providerConfig.id,\n        provider: providerConfig,\n        logger: logger,\n        events: events,\n        discovery: discovery,\n        catalogApi: catalogApi,\n        auth: auth,\n        taskRunner: taskRunner,\n        userTransformer: options.userTransformer,\n        groupTransformer: options.groupTransformer,\n      });\n\n      return provider;\n    });\n  }\n\n  constructor(\n    private options: {\n      id: string;\n      provider: KeycloakProviderConfig;\n      logger: LoggerService;\n      taskRunner: SchedulerServiceTaskRunner;\n      events?: EventsService;\n      catalogApi?: CatalogApi;\n      discovery: DiscoveryService;\n      auth: AuthService;\n      userTransformer?: UserTransformer;\n      groupTransformer?: GroupTransformer;\n    },\n  ) {\n    this.meter = metrics.getMeter('default');\n    this.counter = this.meter.createCounter(\n      'backend_keycloak.fetch.task.failure.count',\n      {\n        description:\n          'Counts the number of failed Keycloak data fetch tasks. Each increment indicates a complete failure of a fetch task, meaning no data was provided to the Catalog API. However, data may still be fetched in subsequent tasks, depending on the nature of the error.',\n      },\n    );\n    this.schedule(options.taskRunner);\n    this.events = options.events;\n    this.catalogApi = options.catalogApi\n      ? options.catalogApi\n      : new CatalogClient({ discoveryApi: options.discovery });\n  }\n\n  /**\n   * Returns the name of this entity provider.\n   */\n  getProviderName(): string {\n    return `KeycloakOrgEntityProvider:${this.options.id}`;\n  }\n\n  /**\n   * Connect to Backstage catalog entity provider\n   * @param connection - The connection to the catalog API ingestor, which allows the provision of new entities.\n   */\n  async connect(connection: EntityProviderConnection) {\n    this.connection = connection;\n    await this.events?.subscribe({\n      id: this.getProviderName(),\n      topics: ['keycloak'],\n      onEvent: async params => {\n        const logger = this.options.logger;\n        const provider = this.options.provider;\n\n        logger.info(`Received event :${params.topic}`);\n\n        const eventPayload = params.eventPayload as {\n          type: string;\n          [key: string]: any;\n        };\n\n        const KeyCloakAdminClientModule = await import(\n          '@keycloak/keycloak-admin-client'\n        );\n        const KeyCloakAdminClient = KeyCloakAdminClientModule.default;\n\n        const kcAdminClient = new KeyCloakAdminClient({\n          baseUrl: provider.baseUrl,\n          realmName: provider.loginRealm,\n        });\n        await authenticate(kcAdminClient, provider, logger);\n\n        if (\n          eventPayload.type === TOPIC_USER_CREATE ||\n          eventPayload.type === TOPIC_USER_DELETE ||\n          eventPayload.type === TOPIC_USER_UPDATE\n        ) {\n          await this.onUserEvent({\n            logger,\n            eventPayload: eventPayload,\n            client: kcAdminClient,\n          });\n        }\n\n        if (\n          eventPayload.type === TOPIC_USER_ADD_GROUP ||\n          eventPayload.type === TOPIC_USER_REMOVE_GROUP\n        ) {\n          await this.onMembershipChange({\n            logger,\n            eventPayload: eventPayload,\n            client: kcAdminClient,\n          });\n        }\n\n        if (\n          eventPayload.type === TOPIC_GROUP_CREATE ||\n          eventPayload.type === TOPIC_GROUP_UPDATE ||\n          eventPayload.type === TOPIC_GROUP_DELETE\n        ) {\n          await this.onGroupEvent({\n            logger,\n            eventPayload: eventPayload,\n            client: kcAdminClient,\n          });\n        }\n      },\n    });\n    await this.scheduleFn?.();\n  }\n\n  private addEntitiesOperation = (entities: Entity[]) => ({\n    removed: [],\n    added: entities.map(entity => ({\n      locationKey: `keycloak-org-provider:${this.options.id}`,\n      entity: withLocations(\n        this.options.provider.baseUrl,\n        this.options.provider.realm,\n        entity,\n      ),\n    })),\n  });\n\n  private removeEntitiesOperation = (entities: Entity[]) => ({\n    added: [],\n    removed: entities.map(entity => ({\n      locationKey: `keycloak-org-provider:${this.options.id}`,\n      entity: withLocations(\n        this.options.provider.baseUrl,\n        this.options.provider.realm,\n        entity,\n      ),\n    })),\n  });\n\n  private async onUserEvent(options: {\n    logger?: LoggerService;\n    eventPayload: any;\n    client: KeycloakAdminClient;\n  }): Promise<void> {\n    if (!this.connection) {\n      throw new NotFoundError('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const provider = this.options.provider;\n    const client = options.client;\n    const userId = options.eventPayload.resourcePath.split('/')[1];\n\n    if (options.eventPayload.type === TOPIC_USER_CREATE) {\n      await this.handleUserCreate(userId, client, provider, logger);\n    }\n    if (options.eventPayload.type === TOPIC_USER_DELETE) {\n      await this.handleUserDelete(userId, logger);\n    }\n\n    if (options.eventPayload.type === TOPIC_USER_UPDATE) {\n      await this.onUserEdit(userId, client, provider, logger);\n    }\n\n    logger.info(\n      `Processed Keycloak User Event: ${options.eventPayload.type} for user ID ${userId}`,\n    );\n  }\n\n  private async handleUserCreate(\n    userId: string,\n    client: KeycloakAdminClient,\n    provider: KeycloakProviderConfig,\n    logger: LoggerService,\n  ): Promise<void> {\n    await ensureTokenValid(client, provider, logger);\n    const userAdded = await client.users.findOne({ id: userId });\n\n    if (!userAdded) {\n      logger.debug(\n        `Failed to fetch user with ID ${userId} after USER_CREATE event`,\n      );\n      return;\n    }\n\n    const userEntity = await parseUser(\n      userAdded,\n      provider.realm,\n      [],\n      new Map(),\n      this.options.userTransformer,\n    );\n\n    if (!userEntity) {\n      logger.debug(`Failed to parse user entity for user ID ${userId}`);\n      return;\n    }\n\n    const { added } = this.addEntitiesOperation([userEntity]);\n\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added: added,\n      removed: [],\n    });\n  }\n\n private async handleUserDelete(\n    userId: string,\n    logger: LoggerService,\n  ): Promise<void> {\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n    const {\n      items: [userEntity],\n    } = await this.catalogApi.getEntities(\n      {\n        filter: {\n          kind: 'User',\n          [`metadata.annotations.${KEYCLOAK_ID_ANNOTATION}`]: userId,\n        },\n      },\n      { token },\n    );\n\n    if (!userEntity) {\n      logger.debug(`Failed to parse user entity for user ID ${userId}`);\n      return;\n    }\n\n    const { added, removed } = this.removeEntitiesOperation([\n      userEntity,\n    ]);\n\n    console.log(removed);\n\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added: added,\n      removed: removed,\n    });\n  }\n\n  private async onUserEdit(\n    userId: string,\n    client: KeycloakAdminClient,\n    provider: KeycloakProviderConfig,\n    logger: LoggerService,\n  ): Promise<void> {\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n    const {\n      items: [oldUserEntity],\n    } = await this.catalogApi.getEntities(\n      {\n        filter: {\n          kind: 'User',\n          [`metadata.annotations.${KEYCLOAK_ID_ANNOTATION}`]: userId,\n        },\n      },\n      { token },\n    );\n\n    const oldGroupEntityRefs =\n      oldUserEntity?.relations\n        ?.filter(r => r.type === 'memberOf')\n        .map(r => r.targetRef) ?? [];\n    const oldGroupEntities = (\n      await Promise.all(\n        oldGroupEntityRefs.map(ref =>\n          this.catalogApi.getEntityByRef(ref, { token }),\n        ),\n      )\n    ).filter((entity): entity is Entity => !entity);\n\n    const allGroups: GroupRepresentation[] = (\n      await Promise.all(\n        oldGroupEntities.map(async group => {\n          if (group.metadata.annotations) {\n            await ensureTokenValid(client, provider, logger);\n            return await client.groups.findOne({\n              id: group.metadata.annotations[KEYCLOAK_ID_ANNOTATION],\n              realm: provider.realm,\n            });\n          }\n          return undefined;\n        }),\n      )\n    ).filter((g): g is GroupRepresentation => !g);\n\n    const filteredParsedGroups = await this.createGroupEntities(\n      allGroups,\n      provider,\n      client,\n      logger,\n    );\n    await ensureTokenValid(client, provider, logger);\n    const newUser = await client.users.findOne({ id: userId });\n    if (!newUser) {\n      logger.debug(\n        `Failed to fetch user with ID ${userId} after USER_UPDATE event`,\n      );\n      return;\n    }\n\n    const userToGroupMapping = new Map<string, string[]>();\n    if (newUser.username) {\n      userToGroupMapping.set(\n        newUser.username,\n        filteredParsedGroups.map(g => g.entity.metadata.name),\n      );\n    }\n\n    const newUserEntity = await parseUser(\n      newUser,\n      provider.realm,\n      filteredParsedGroups,\n      userToGroupMapping,\n      this.options.userTransformer,\n    );\n\n    if (!newUserEntity || !oldUserEntity) {\n      logger.debug(`Failed to parse user entity for user ID ${userId}`);\n      return;\n    }\n\n    const { added } = this.addEntitiesOperation([newUserEntity]);\n    const { removed } = this.removeEntitiesOperation([oldUserEntity]);\n\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added: added,\n      removed: removed,\n    });\n  }\n\n  private async onMembershipChange(options: {\n    logger?: LoggerService;\n    eventPayload: any;\n    client: KeycloakAdminClient;\n  }): Promise<void> {\n    if (!this.connection) {\n      throw new NotFoundError('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const provider = this.options.provider;\n    const client = options.client;\n\n    const userId = options.eventPayload.resourcePath.split('/')[1];\n    const groupId = options.eventPayload.resourcePath.split('/')[3];\n\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n\n    const {\n      items: [oldUserEntity],\n    } = await this.catalogApi.getEntities(\n      {\n        filter: {\n          kind: 'User',\n          [`metadata.annotations.${KEYCLOAK_ID_ANNOTATION}`]: userId,\n        },\n      },\n      { token },\n    );\n\n    await ensureTokenValid(client, provider, logger);\n    const newUser = await client.users.findOne({ id: userId });\n    if (!newUser) {\n      logger.debug(\n        `Failed to fetch user with ID ${userId} after USER_UPDATE event`,\n      );\n      return;\n    }\n\n    await ensureTokenValid(client, provider, logger);\n    const newGroup = (await client.groups.findOne({\n      id: groupId,\n    })) as GroupRepresentationWithParent;\n\n    newGroup.members = await getAllGroupMembers(\n      async () => {\n        await ensureTokenValid(client, provider, logger);\n        return client.groups;\n      },\n      groupId,\n      provider,\n      {\n        userQuerySize: provider.userQuerySize,\n      },\n    );\n\n    let newGroupEntity: GroupRepresentationWithParentAndEntity | null = null;\n\n    const parsedGroup = (await parseGroup(\n      newGroup,\n      provider.realm,\n      this.options.groupTransformer,\n    )) as GroupRepresentationWithParent;\n\n    if (parsedGroup) {\n      newGroupEntity = {\n        ...parsedGroup,\n        entity: parsedGroup,\n      } as GroupRepresentationWithParentAndEntity;\n    }\n\n    if (!newGroupEntity) {\n      logger.debug(`Failed to parse group entity for group ID ${groupId}`);\n      return;\n    }\n\n    const memberToGroupMap = new Map<string, string[]>();\n\n    const currentGroupMemberships =\n      (oldUserEntity.spec?.memberOf as string[]) ?? [];\n\n    if (options.eventPayload.type === TOPIC_USER_ADD_GROUP) {\n      // If the user is being added to a group, we need to add the group to the user's memberOf field\n      currentGroupMemberships.push(newGroupEntity.entity.metadata.name);\n    } else {\n      // If the user is being removed from a group, we need to remove the group from the user's memberOf field\n      const index = currentGroupMemberships.indexOf(\n        newGroupEntity.entity.metadata.name,\n      );\n      if (index > -1) {\n        currentGroupMemberships.splice(index, 1);\n      }\n    }\n\n    memberToGroupMap.set(oldUserEntity.metadata.name, currentGroupMemberships);\n\n    const newUserEntity = await parseUser(\n      newUser,\n      provider.realm,\n      [newGroupEntity],\n      memberToGroupMap,\n      this.options.userTransformer,\n    );\n\n    if (!newUserEntity || !oldUserEntity) {\n      logger.debug(\n        `Failed to find user entity for user ID ${userId} after membership change event`,\n      );\n      return;\n    }\n\n    if (!newGroupEntity) {\n      logger.debug(\n        `Failed to find group entity for group ID ${groupId} after membership change event`,\n      );\n      return;\n    }\n\n    const { added } = this.addEntitiesOperation([\n      newUserEntity\n    ]);\n    const { removed } = this.removeEntitiesOperation([\n      oldUserEntity,\n    ]);\n\n    await this.connection.applyMutation({\n      type: 'delta',\n      added,\n      removed,\n    });\n\n    logger.info(\n      `Processed Keycloak User Membership Change Event: ${options.eventPayload.type} for user ID ${userId} and group ID ${groupId}`,\n    );\n  }\n\n  private async onGroupEvent(options: {\n    logger?: LoggerService;\n    eventPayload: any;\n    client: KeycloakAdminClient;\n  }): Promise<void> {\n    if (!this.connection) {\n      throw new NotFoundError('Not initialized');\n    }\n    const logger = options?.logger ?? this.options.logger;\n    const provider = this.options.provider;\n    const client = options.client;\n    const resourcePath = options.eventPayload.resourcePath.split('/');\n\n    if (options.eventPayload.type === 'admin.GROUP-CREATE') {\n      await this.handleGroupCreate(\n        resourcePath,\n        options,\n        logger,\n        provider,\n        client,\n      );\n    }\n    if (options.eventPayload.type === 'admin.GROUP-DELETE') {\n      await this.handleGroupDelete(resourcePath, logger, provider, client);\n    }\n    // TODO: GROUP-UPDATE\n    // - Updating group name/metadata: update the parent, the group itself, and its subgroups\n    // - Moving a group to another parent: update the old parent, the group itself, and the new parent (subgroups stay under the group, no changes needed for them)\n  }\n\n  private async handleGroupCreate(\n    resourcePath: string[],\n    options: {\n      logger?: LoggerService;\n      eventPayload: any;\n      client: KeycloakAdminClient;\n    },\n    logger: LoggerService,\n    provider: KeycloakProviderConfig,\n    client: KeycloakAdminClient,\n  ) {\n    // 1. Top-level group: fetch group by ID and add it as a new entity in the catalog\n    if (resourcePath.length === 2) {\n      const groupId = resourcePath[1];\n      await ensureTokenValid(client, provider, logger);\n      const group = await client.groups.findOne({ id: groupId });\n      if (!group) {\n        logger.debug(\n          `Failed to fetch group with ID ${groupId} after GROUP_CREATE event`,\n        );\n        return;\n      }\n      const groupEntity = await parseGroup(\n        group,\n        provider.realm,\n        this.options.groupTransformer,\n      );\n      if (!groupEntity) {\n        logger.debug(`Failed to parse group entity for group ID ${groupId}`);\n        return;\n      }\n\n      const { added } = this.addEntitiesOperation([groupEntity]);\n\n      await this.connection!.applyMutation({\n        type: 'delta',\n        added: added,\n        removed: [],\n      });\n      logger.info(\n        `Processed Keycloak Event ${options.eventPayload.type} for top-level group ID ${groupId}`,\n      );\n    }\n    // 2. Subgroup: update the parent group and add the new subgroup as a separate entity in the catalog\n    else if (resourcePath.length === 3) {\n      const parentGroupId = resourcePath[1];\n      const subgroupId = JSON.parse(options.eventPayload.representation).id;\n      await ensureTokenValid(client, provider, logger);\n      const newParentGroup = (await client.groups.findOne({\n        id: parentGroupId,\n      })) as GroupRepresentationWithParent;\n      if (!newParentGroup) {\n        logger.debug(\n          `Failed to fetch parent group with ID ${parentGroupId} after GROUP_CREATE event`,\n        );\n        return;\n      }\n      await ensureTokenValid(client, provider, logger);\n      const subgroup = (await client.groups.findOne({\n        id: subgroupId,\n      })) as GroupRepresentationWithParent;\n      if (!subgroup) {\n        logger.debug(\n          `Failed to fetch subgroup with ID ${subgroupId} after GROUP_CREATE event`,\n        );\n        return;\n      }\n\n      const { token } = await this.options.auth.getPluginRequestToken({\n        onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n        targetPluginId: 'catalog',\n      });\n\n      // Find the old parent group entity\n      const {\n        items: [oldParentGroupEntity],\n      } = (await this.catalogApi.getEntities(\n        {\n          filter: {\n            kind: 'Group',\n            [`metadata.annotations.${KEYCLOAK_ID_ANNOTATION}`]: parentGroupId,\n          },\n        },\n        { token },\n      )) as { items: [GroupEntity] };\n\n      if (!oldParentGroupEntity) {\n        logger.debug(\n          `Failed to find old parent group entity for group ID ${parentGroupId} after GROUP_CREATE event`,\n        );\n        return;\n      }\n\n      const filteredParsedGroups = await this.createGroupEntities(\n        [subgroup, newParentGroup],\n        provider,\n        client,\n        logger,\n      );\n\n      if (filteredParsedGroups.length === 0) {\n        logger.debug(\n          `Failed to parse group entities for parent group ID ${parentGroupId} and subgroup ID ${subgroupId}`,\n        );\n        return;\n      }\n\n      const { added } = this.addEntitiesOperation(\n        filteredParsedGroups.map(g => g.entity),\n      );\n      const { removed } = this.removeEntitiesOperation([oldParentGroupEntity]);\n      await this.connection!.applyMutation({\n        type: 'delta',\n        added: added,\n        removed: removed,\n      });\n      logger.info(\n        `Processed Keycloak Event: ${options.eventPayload.type} for subgroup ID ${subgroupId} under parent group ID ${parentGroupId}`,\n      );\n    }\n  }\n\n  private async handleGroupDelete(\n    resourcePath: string[],\n    logger: LoggerService,\n    provider: KeycloakProviderConfig,\n    client: KeycloakAdminClient,\n  ) {\n    const groupId = resourcePath[1];\n\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n\n    const {\n      items: [deletedGroup],\n    } = (await this.catalogApi.getEntities(\n      {\n        filter: {\n          kind: 'Group',\n          [`metadata.annotations.${KEYCLOAK_ID_ANNOTATION}`]: groupId,\n        },\n      },\n      { token },\n    )) as { items: [GroupEntity] };\n\n    const parentEntityRef = this.getParentEntityRef(deletedGroup);\n    const subgroupRefs = this.getSubgroupRefs(deletedGroup);\n\n    const oldParentEntity = parentEntityRef\n      ? await this.catalogApi.getEntityByRef(parentEntityRef, { token })\n      : undefined;\n\n    const validSubgroupEntities = await this.getEntitiesByRefs(subgroupRefs);\n\n    let newParent;\n    if (\n      oldParentEntity &&\n      oldParentEntity.metadata &&\n      oldParentEntity.metadata.annotations &&\n      oldParentEntity.metadata.annotations[KEYCLOAK_ID_ANNOTATION]\n    ) {\n      await ensureTokenValid(client, provider, logger);\n      newParent = (await client.groups.findOne({\n        id: oldParentEntity.metadata.annotations[KEYCLOAK_ID_ANNOTATION],\n      })) as GroupRepresentationWithParent;\n    }\n\n    const [newParentEntity] = await this.createGroupEntities(\n      [newParent].filter((g): g is GroupRepresentationWithParent => !!g),\n      provider,\n      client,\n      logger,\n    );\n\n    const userMembershipsToUpdate = this.collectUserMemberships(\n      deletedGroup,\n      validSubgroupEntities,\n    );\n\n    const { oldUserEntities, newUserEntities } =\n      await this.updateUserEntitiesAfterGroupDelete(\n        userMembershipsToUpdate,\n        provider,\n        client,\n        logger,\n      );\n\n    const { added } = this.addEntitiesOperation([\n      ...(newParentEntity ? [newParentEntity.entity] : []),\n      ...newUserEntities,\n    ]);\n\n    const { removed } = this.removeEntitiesOperation([\n      deletedGroup,\n      ...(oldParentEntity ? [oldParentEntity] : []),\n      ...validSubgroupEntities,\n      ...oldUserEntities,\n    ]);\n\n    await this.connection!.applyMutation({\n      type: 'delta',\n      added,\n      removed,\n    });\n\n    logger.info(\n      `Processed Keycloak group deletion event for group ID ${groupId} and its subgroups`,\n    );\n  }\n\n  private getParentEntityRef(group: GroupEntity): string | undefined {\n    return group.relations?.find(relation => relation.type === 'childOf')\n      ?.targetRef;\n  }\n\n  private getSubgroupRefs(group: GroupEntity): string[] {\n    return (\n      group.relations\n        ?.filter(relation => relation.type === 'parentOf')\n        .map(relation => relation.targetRef) ?? []\n    );\n  }\n\n  private async getEntitiesByRefs(refs: string[]): Promise<Entity[]> {\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n    const entities = await Promise.all(\n      refs.map(ref => this.catalogApi.getEntityByRef(ref, { token })),\n    );\n    return entities.filter((entity): entity is Entity => !!entity);\n  }\n\n  private collectUserMemberships(\n    deletedGroup: GroupEntity,\n    validSubgroupEntities: Entity[],\n  ): Map<string, string[]> {\n    const userMembershipsToUpdate: Map<string, string[]> = new Map(\n      deletedGroup.relations\n        ?.filter(relation => relation.type === 'hasMember')\n        .map(relation => [\n          relation.targetRef,\n          [\n            `${deletedGroup.kind}:${deletedGroup.metadata.namespace}/${deletedGroup.metadata.name}`.toLowerCase(),\n          ],\n        ]) ?? [],\n    );\n\n    validSubgroupEntities.forEach(subgroup => {\n      const subgroupMemberships = subgroup.relations?.filter(\n        relation => relation.type === 'hasMember',\n      );\n      if (subgroupMemberships) {\n        subgroupMemberships.forEach(relation => {\n          const currentMembers =\n            userMembershipsToUpdate.get(relation.targetRef) ?? [];\n          userMembershipsToUpdate.set(relation.targetRef, [\n            ...currentMembers,\n            `${subgroup.kind}:${subgroup.metadata.namespace}/${subgroup.metadata.name}`.toLowerCase(),\n          ]);\n        });\n      }\n    });\n\n    return userMembershipsToUpdate;\n  }\n\n  private async updateUserEntitiesAfterGroupDelete(\n    userMembershipsToUpdate: Map<string, string[]>,\n    provider: KeycloakProviderConfig,\n    client: KeycloakAdminClient,\n    logger: LoggerService,\n  ): Promise<{ oldUserEntities: Entity[]; newUserEntities: Entity[] }> {\n    const oldUserEntities: Entity[] = [];\n    const newUserEntities: Entity[] = [];\n\n    const { token } = await this.options.auth.getPluginRequestToken({\n      onBehalfOf: await this.options.auth.getOwnServiceCredentials(),\n      targetPluginId: 'catalog',\n    });\n\n    for (const [userEntityRef] of userMembershipsToUpdate.entries()) {\n      const userEntityInCatalog = await this.catalogApi.getEntityByRef(\n        userEntityRef,\n        {token}\n      );\n      if (userEntityInCatalog?.metadata.annotations?.[KEYCLOAK_ID_ANNOTATION]) {\n        oldUserEntities.push(userEntityInCatalog);\n        await ensureTokenValid(client, provider, logger);\n        const userFromKeycloak = await client.users.findOne({\n          id: userEntityInCatalog.metadata.annotations[KEYCLOAK_ID_ANNOTATION],\n        });\n        if (userFromKeycloak) {\n          const allGroups = await getAllGroups(\n            () => Promise.resolve(client.users),\n            userEntityInCatalog.metadata.annotations[KEYCLOAK_ID_ANNOTATION],\n            provider,\n            {\n              groupQuerySize: provider.groupQuerySize,\n            },\n          );\n\n          const filteredParsedGroups = await this.createGroupEntities(\n            allGroups,\n            provider,\n            client,\n            logger,\n          );\n\n          const transformer =\n            this.options.userTransformer ?? noopUserTransformer;\n          const entity: UserEntity = {\n            apiVersion: 'backstage.io/v1beta1',\n            kind: 'User',\n            metadata: {\n              name: userFromKeycloak.username!,\n              annotations: {\n                [KEYCLOAK_ID_ANNOTATION]: userFromKeycloak.id!,\n                [KEYCLOAK_REALM_ANNOTATION]: provider.realm,\n              },\n            },\n            spec: {\n              profile: {\n                email: userFromKeycloak.email,\n                ...(userFromKeycloak.firstName || userFromKeycloak.lastName\n                  ? {\n                      displayName: [\n                        userFromKeycloak.firstName,\n                        userFromKeycloak.lastName,\n                      ]\n                        .filter(Boolean)\n                        .join(' '),\n                    }\n                  : {}),\n              },\n              memberOf: allGroups.flatMap(g => (g?.name ? [g.name] : [])),\n            },\n          };\n\n          transformer(\n            entity,\n            userFromKeycloak,\n            provider.realm,\n            filteredParsedGroups,\n          );\n\n          newUserEntities.push(entity);\n        }\n      }\n    }\n    return { oldUserEntities, newUserEntities };\n  }\n\n  private async createGroupEntities(\n    allGroups: GroupRepresentationWithParent[],\n    provider: KeycloakProviderConfig,\n    client: KeycloakAdminClient,\n    logger: LoggerService,\n  ): Promise<GroupRepresentationWithParentAndEntity[]> {\n    let rawKGroups: GroupRepresentationWithParent[] = [];\n\n    let serverVersion: number;\n\n    try {\n      serverVersion = await getServerVersion(client);\n    } catch (error) {\n      throw new Error(\n        `Failed to retrieve Keycloak server information: ${error}`,\n      );\n    }\n\n    const isVersion23orHigher = serverVersion >= 23;\n\n    if (isVersion23orHigher) {\n      rawKGroups = await processGroupsRecursively(\n        client,\n        provider,\n        logger,\n        allGroups,\n      );\n    } else {\n      rawKGroups = allGroups.reduce(\n        (acc, g) => acc.concat(...traverseGroups(g)),\n        [] as GroupRepresentationWithParent[],\n      );\n    }\n\n    const kGroups = await Promise.all(\n      rawKGroups.map(async g => {\n        g.members = await getAllGroupMembers(\n          async () => {\n            await ensureTokenValid(client, provider, logger);\n            return client.groups as Groups;\n          },\n          g.id!,\n          provider,\n          {\n            userQuerySize: provider.userQuerySize,\n          },\n        );\n\n        if (isVersion23orHigher) {\n          if (g.subGroupCount! > 0) {\n            await ensureTokenValid(client, provider, logger);\n            g.subGroups = await client.groups.listSubGroups({\n              parentId: g.id!,\n              first: 0,\n              max: g.subGroupCount,\n              briefRepresentation:\n                this.options.provider.briefRepresentation ??\n                KEYCLOAK_BRIEF_REPRESENTATION_DEFAULT,\n              realm: provider.realm,\n            });\n          }\n          if (g.parentId) {\n            await ensureTokenValid(client, provider, logger);\n            const groupParent = await client.groups.findOne({\n              id: g.parentId,\n              realm: provider.realm,\n            });\n            g.parent = groupParent?.name;\n          }\n        }\n\n        return g;\n      }),\n    );\n\n    const parsedGroups = await Promise.all(\n      kGroups.map(async g => {\n        if (!g) return null;\n        const entity = await parseGroup(\n          g,\n          provider.realm,\n          this.options.groupTransformer,\n        );\n        if (entity) {\n          return {\n            ...g,\n            entity,\n          } as GroupRepresentationWithParentAndEntity;\n        }\n        return null;\n      }),\n    );\n    return parsedGroups.filter(\n      (group): group is GroupRepresentationWithParentAndEntity =>\n        group !== null,\n    );\n  }\n\n  /**\n   * Runs one complete ingestion loop. Call this method regularly at some\n   * appropriate cadence.\n   */\n  async read(options: { logger?: LoggerService; taskInstanceId: string }) {\n    if (!this.connection) {\n      throw new NotFoundError('Not initialized');\n    }\n\n    const logger = options?.logger ?? this.options.logger;\n    const provider = this.options.provider;\n\n    const { markReadComplete } = trackProgress(logger);\n    const KeyCloakAdminClientModule = await import(\n      '@keycloak/keycloak-admin-client'\n    );\n    const KeyCloakAdminClient = KeyCloakAdminClientModule.default;\n\n    const kcAdminClient = new KeyCloakAdminClient({\n      baseUrl: provider.baseUrl,\n      realmName: provider.loginRealm,\n    });\n    await authenticate(kcAdminClient, provider, logger);\n\n    const pLimitCJSModule = await import('p-limit');\n    const limitFunc = pLimitCJSModule.default;\n    const concurrency = provider.maxConcurrency ?? 20;\n    const limit: LimitFunction = limitFunc(concurrency);\n\n    const dataBatchFailureCounter = this.meter.createCounter(\n      'backend_keycloak.fetch.data.batch.failure.count',\n      {\n        description:\n          'Keycloak data batch fetch failure counter. Incremented for each batch fetch failure. Each failure means that a part of the data was not fetched due to an error, and thus the corresponding data batch was skipped during the current fetch task.',\n      },\n    );\n    const { users, groups } = await readKeycloakRealm(\n      kcAdminClient,\n      provider,\n      logger,\n      limit,\n      options.taskInstanceId,\n      dataBatchFailureCounter,\n      {\n        userQuerySize: provider.userQuerySize,\n        groupQuerySize: provider.groupQuerySize,\n        userTransformer: this.options.userTransformer,\n        groupTransformer: this.options.groupTransformer,\n      },\n    );\n\n    const { markCommitComplete } = markReadComplete({ users, groups });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: [...users, ...groups].map(entity => ({\n        locationKey: `keycloak-org-provider:${this.options.id}`,\n        entity: withLocations(provider.baseUrl, provider.realm, entity),\n      })),\n    });\n\n    markCommitComplete();\n  }\n\n  /**\n   * Periodically schedules a task to read Keycloak user and group information, parse it, and provision it to the Backstage catalog.\n   * @param taskRunner - The task runner to use for scheduling tasks.\n   */\n  schedule(taskRunner: SchedulerServiceTaskRunner) {\n    this.scheduleFn = async () => {\n      const id = `${this.getProviderName()}:refresh`;\n      await taskRunner.run({\n        id,\n        fn: async () => {\n          const taskInstanceId = uuid.v4();\n          const logger = this.options.logger.child({\n            class: KeycloakOrgEntityProvider.prototype.constructor.name,\n            taskId: id,\n            taskInstanceId: taskInstanceId,\n          });\n\n          try {\n            await this.read({ logger, taskInstanceId });\n          } catch (error) {\n            this.counter.add(1, { taskInstanceId: taskInstanceId });\n            if (isError(error)) {\n              // Ensure that we don't log any sensitive internal data:\n              logger.error('Error while syncing Keycloak users and groups', {\n                // Default Error properties:\n                name: error.name,\n                cause: error.cause,\n                message: error.message,\n                stack: error.stack,\n                // Additional status code if available:\n                status: (error.response as { status?: string })?.status,\n              });\n            }\n          }\n        },\n      });\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction trackProgress(logger: LoggerService) {\n  let timestamp = Date.now();\n  let summary: string;\n\n  logger.info('Reading Keycloak users and groups');\n\n  function markReadComplete(read: { users: unknown[]; groups: unknown[] }) {\n    summary = `${read.users.length} Keycloak users and ${read.groups.length} Keycloak groups`;\n    const readDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    timestamp = Date.now();\n    logger.info(`Read ${summary} in ${readDuration} seconds. Committing...`);\n    return { markCommitComplete };\n  }\n\n  function markCommitComplete() {\n    const commitDuration = ((Date.now() - timestamp) / 1000).toFixed(1);\n    logger.info(`Committed ${summary} in ${commitDuration} seconds.`);\n  }\n\n  return { markReadComplete };\n}\n"],"names":["KEYCLOAK_ID_ANNOTATION","merge","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","metrics","CatalogClient","config","readProviderConfigs","InputError","authenticate","NotFoundError","ensureTokenValid","parseUser","getAllGroupMembers","parseGroup","getAllGroups","noopUserTransformer","KEYCLOAK_REALM_ANNOTATION","getServerVersion","processGroupsRecursively","traverseGroups","KEYCLOAK_BRIEF_REPRESENTATION_DEFAULT","readKeycloakRealm","uuid","isError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HO,MAAM,aAAgB,GAAA,CAC3B,OACA,EAAA,KAAA,EACA,MACW,KAAA;AACX,EAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAS,KAAA,OAAA,GAAU,QAAW,GAAA,OAAA;AAClD,EAAA,MAAM,QAAW,GAAA,CAAA,IAAA,EAAO,OAAO,CAAA,cAAA,EAAiB,KAAK,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,EAAI,MAAO,CAAA,QAAA,CAAS,WAAc,GAAAA,gCAAsB,CAAC,CAAA,CAAA;AACtH,EAAO,OAAAC,YAAA;AAAA,IACL;AAAA,MACE,QAAU,EAAA;AAAA,QACR,WAAa,EAAA;AAAA,UACX,CAACC,gCAAmB,GAAG,QAAA;AAAA,UACvB,CAACC,uCAA0B,GAAG;AAAA;AAChC;AACF,KACF;AAAA,IACA;AAAA,GACF;AACF;AAEA,MAAM,iBAAoB,GAAA,mBAAA;AAC1B,MAAM,iBAAoB,GAAA,mBAAA;AAC1B,MAAM,iBAAoB,GAAA,mBAAA;AAC1B,MAAM,oBAAuB,GAAA,+BAAA;AAC7B,MAAM,uBAA0B,GAAA,+BAAA;AAChC,MAAM,kBAAqB,GAAA,oBAAA;AAC3B,MAAM,kBAAqB,GAAA,oBAAA;AAC3B,MAAM,kBAAqB,GAAA,oBAAA;AAOpB,MAAM,yBAAoD,CAAA;AAAA,EAiE/D,YACU,OAYR,EAAA;AAZQ,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAaR,IAAK,IAAA,CAAA,KAAA,GAAQC,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA;AACvC,IAAK,IAAA,CAAA,OAAA,GAAU,KAAK,KAAM,CAAA,aAAA;AAAA,MACxB,2CAAA;AAAA,MACA;AAAA,QACE,WACE,EAAA;AAAA;AACJ,KACF;AACA,IAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,UAAU,CAAA;AAChC,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA;AACtB,IAAK,IAAA,CAAA,UAAA,GAAa,OAAQ,CAAA,UAAA,GACtB,OAAQ,CAAA,UAAA,GACR,IAAIC,2BAAA,CAAc,EAAE,YAAA,EAAc,OAAQ,CAAA,SAAA,EAAW,CAAA;AAAA;AAC3D,EA3FQ,UAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AAAA,EACS,MAAA;AAAA,EACA,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQjB,OAAO,UACL,CAAA,IAAA,EAQA,OAO6B,EAAA;AAC7B,IAAA,MAAM,UAAEC,QAAQ,EAAA,MAAA,EAAQ,YAAY,MAAQ,EAAA,IAAA,EAAM,WAAc,GAAA,IAAA;AAChE,IAAA,OAAOC,0BAAoB,CAAAD,QAAM,CAAE,CAAA,GAAA,CAAI,CAAkB,cAAA,KAAA;AACvD,MAAI,IAAA,UAAA;AACJ,MAAI,IAAA,WAAA,IAAe,OAAW,IAAA,cAAA,CAAe,QAAU,EAAA;AAErD,QAAA,UAAA,GAAa,QAAQ,SAAU,CAAA,yBAAA;AAAA,UAC7B,cAAe,CAAA;AAAA,SACjB;AAAA,OACF,MAAA,IAAW,cAAc,OAAS,EAAA;AAEhC,QAAA,UAAA,GAAa,OAAQ,CAAA,QAAA;AAAA,OAChB,MAAA;AACL,QAAA,MAAM,IAAIE,iBAAA;AAAA,UACR,CAAA,8DAAA,EAAiE,eAAe,EAAE,CAAA,CAAA;AAAA,SACpF;AAAA;AAGF,MAAM,MAAA,QAAA,GAAW,IAAI,yBAA0B,CAAA;AAAA,QAC7C,IAAI,cAAe,CAAA,EAAA;AAAA,QACnB,QAAU,EAAA,cAAA;AAAA,QACV,MAAA;AAAA,QACA,MAAA;AAAA,QACA,SAAA;AAAA,QACA,UAAA;AAAA,QACA,IAAA;AAAA,QACA,UAAA;AAAA,QACA,iBAAiB,OAAQ,CAAA,eAAA;AAAA,QACzB,kBAAkB,OAAQ,CAAA;AAAA,OAC3B,CAAA;AAED,MAAO,OAAA,QAAA;AAAA,KACR,CAAA;AAAA;AACH;AAAA;AAAA;AAAA,EAkCA,eAA0B,GAAA;AACxB,IAAO,OAAA,CAAA,0BAAA,EAA6B,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA;AACrD;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,QAAQ,UAAsC,EAAA;AAClD,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA;AAClB,IAAM,MAAA,IAAA,CAAK,QAAQ,SAAU,CAAA;AAAA,MAC3B,EAAA,EAAI,KAAK,eAAgB,EAAA;AAAA,MACzB,MAAA,EAAQ,CAAC,UAAU,CAAA;AAAA,MACnB,OAAA,EAAS,OAAM,MAAU,KAAA;AACvB,QAAM,MAAA,MAAA,GAAS,KAAK,OAAQ,CAAA,MAAA;AAC5B,QAAM,MAAA,QAAA,GAAW,KAAK,OAAQ,CAAA,QAAA;AAE9B,QAAA,MAAA,CAAO,IAAK,CAAA,CAAA,gBAAA,EAAmB,MAAO,CAAA,KAAK,CAAE,CAAA,CAAA;AAE7C,QAAA,MAAM,eAAe,MAAO,CAAA,YAAA;AAK5B,QAAM,MAAA,yBAAA,GAA4B,MAAM,OACtC,iCACF,CAAA;AACA,QAAA,MAAM,sBAAsB,yBAA0B,CAAA,OAAA;AAEtD,QAAM,MAAA,aAAA,GAAgB,IAAI,mBAAoB,CAAA;AAAA,UAC5C,SAAS,QAAS,CAAA,OAAA;AAAA,UAClB,WAAW,QAAS,CAAA;AAAA,SACrB,CAAA;AACD,QAAM,MAAAC,yBAAA,CAAa,aAAe,EAAA,QAAA,EAAU,MAAM,CAAA;AAElD,QACE,IAAA,YAAA,CAAa,SAAS,iBACtB,IAAA,YAAA,CAAa,SAAS,iBACtB,IAAA,YAAA,CAAa,SAAS,iBACtB,EAAA;AACA,UAAA,MAAM,KAAK,WAAY,CAAA;AAAA,YACrB,MAAA;AAAA,YACA,YAAA;AAAA,YACA,MAAQ,EAAA;AAAA,WACT,CAAA;AAAA;AAGH,QAAA,IACE,YAAa,CAAA,IAAA,KAAS,oBACtB,IAAA,YAAA,CAAa,SAAS,uBACtB,EAAA;AACA,UAAA,MAAM,KAAK,kBAAmB,CAAA;AAAA,YAC5B,MAAA;AAAA,YACA,YAAA;AAAA,YACA,MAAQ,EAAA;AAAA,WACT,CAAA;AAAA;AAGH,QACE,IAAA,YAAA,CAAa,SAAS,kBACtB,IAAA,YAAA,CAAa,SAAS,kBACtB,IAAA,YAAA,CAAa,SAAS,kBACtB,EAAA;AACA,UAAA,MAAM,KAAK,YAAa,CAAA;AAAA,YACtB,MAAA;AAAA,YACA,YAAA;AAAA,YACA,MAAQ,EAAA;AAAA,WACT,CAAA;AAAA;AACH;AACF,KACD,CAAA;AACD,IAAA,MAAM,KAAK,UAAa,IAAA;AAAA;AAC1B,EAEQ,oBAAA,GAAuB,CAAC,QAAwB,MAAA;AAAA,IACtD,SAAS,EAAC;AAAA,IACV,KAAA,EAAO,QAAS,CAAA,GAAA,CAAI,CAAW,MAAA,MAAA;AAAA,MAC7B,WAAa,EAAA,CAAA,sBAAA,EAAyB,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA,MACrD,MAAQ,EAAA,aAAA;AAAA,QACN,IAAA,CAAK,QAAQ,QAAS,CAAA,OAAA;AAAA,QACtB,IAAA,CAAK,QAAQ,QAAS,CAAA,KAAA;AAAA,QACtB;AAAA;AACF,KACA,CAAA;AAAA,GACJ,CAAA;AAAA,EAEQ,uBAAA,GAA0B,CAAC,QAAwB,MAAA;AAAA,IACzD,OAAO,EAAC;AAAA,IACR,OAAA,EAAS,QAAS,CAAA,GAAA,CAAI,CAAW,MAAA,MAAA;AAAA,MAC/B,WAAa,EAAA,CAAA,sBAAA,EAAyB,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA,MACrD,MAAQ,EAAA,aAAA;AAAA,QACN,IAAA,CAAK,QAAQ,QAAS,CAAA,OAAA;AAAA,QACtB,IAAA,CAAK,QAAQ,QAAS,CAAA,KAAA;AAAA,QACtB;AAAA;AACF,KACA,CAAA;AAAA,GACJ,CAAA;AAAA,EAEA,MAAc,YAAY,OAIR,EAAA;AAChB,IAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,MAAM,MAAA,IAAIC,qBAAc,iBAAiB,CAAA;AAAA;AAG3C,IAAA,MAAM,MAAS,GAAA,OAAA,EAAS,MAAU,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA;AAC/C,IAAM,MAAA,QAAA,GAAW,KAAK,OAAQ,CAAA,QAAA;AAC9B,IAAA,MAAM,SAAS,OAAQ,CAAA,MAAA;AACvB,IAAA,MAAM,SAAS,OAAQ,CAAA,YAAA,CAAa,aAAa,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AAE7D,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACnD,MAAA,MAAM,IAAK,CAAA,gBAAA,CAAiB,MAAQ,EAAA,MAAA,EAAQ,UAAU,MAAM,CAAA;AAAA;AAE9D,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACnD,MAAM,MAAA,IAAA,CAAK,gBAAiB,CAAA,MAAA,EAAQ,MAAM,CAAA;AAAA;AAG5C,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,iBAAmB,EAAA;AACnD,MAAA,MAAM,IAAK,CAAA,UAAA,CAAW,MAAQ,EAAA,MAAA,EAAQ,UAAU,MAAM,CAAA;AAAA;AAGxD,IAAO,MAAA,CAAA,IAAA;AAAA,MACL,CAAkC,+BAAA,EAAA,OAAA,CAAQ,YAAa,CAAA,IAAI,gBAAgB,MAAM,CAAA;AAAA,KACnF;AAAA;AACF,EAEA,MAAc,gBAAA,CACZ,MACA,EAAA,MAAA,EACA,UACA,MACe,EAAA;AACf,IAAM,MAAAC,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,IAAM,MAAA,SAAA,GAAY,MAAM,MAAO,CAAA,KAAA,CAAM,QAAQ,EAAE,EAAA,EAAI,QAAQ,CAAA;AAE3D,IAAA,IAAI,CAAC,SAAW,EAAA;AACd,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,gCAAgC,MAAM,CAAA,wBAAA;AAAA,OACxC;AACA,MAAA;AAAA;AAGF,IAAA,MAAM,aAAa,MAAMC,cAAA;AAAA,MACvB,SAAA;AAAA,MACA,QAAS,CAAA,KAAA;AAAA,MACT,EAAC;AAAA,0BACG,GAAI,EAAA;AAAA,MACR,KAAK,OAAQ,CAAA;AAAA,KACf;AAEA,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,MAAA,CAAA,KAAA,CAAM,CAA2C,wCAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AAChE,MAAA;AAAA;AAGF,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,KAAK,oBAAqB,CAAA,CAAC,UAAU,CAAC,CAAA;AAExD,IAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,MACnC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA;AAAA,MACA,SAAS;AAAC,KACX,CAAA;AAAA;AACH,EAED,MAAc,gBACX,CAAA,MAAA,EACA,MACe,EAAA;AACf,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AACD,IAAM,MAAA;AAAA,MACJ,KAAA,EAAO,CAAC,UAAU;AAAA,KACpB,GAAI,MAAM,IAAA,CAAK,UAAW,CAAA,WAAA;AAAA,MACxB;AAAA,QACE,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,CAAC,CAAA,qBAAA,EAAwBZ,gCAAsB,CAAA,CAAE,GAAG;AAAA;AACtD,OACF;AAAA,MACA,EAAE,KAAM;AAAA,KACV;AAEA,IAAA,IAAI,CAAC,UAAY,EAAA;AACf,MAAO,MAAA,CAAA,KAAA,CAAM,CAA2C,wCAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AAChE,MAAA;AAAA;AAGF,IAAA,MAAM,EAAE,KAAA,EAAO,OAAQ,EAAA,GAAI,KAAK,uBAAwB,CAAA;AAAA,MACtD;AAAA,KACD,CAAA;AAED,IAAA,OAAA,CAAQ,IAAI,OAAO,CAAA;AAEnB,IAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,MACnC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AACH,EAEA,MAAc,UAAA,CACZ,MACA,EAAA,MAAA,EACA,UACA,MACe,EAAA;AACf,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AACD,IAAM,MAAA;AAAA,MACJ,KAAA,EAAO,CAAC,aAAa;AAAA,KACvB,GAAI,MAAM,IAAA,CAAK,UAAW,CAAA,WAAA;AAAA,MACxB;AAAA,QACE,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,CAAC,CAAA,qBAAA,EAAwBA,gCAAsB,CAAA,CAAE,GAAG;AAAA;AACtD,OACF;AAAA,MACA,EAAE,KAAM;AAAA,KACV;AAEA,IAAA,MAAM,kBACJ,GAAA,aAAA,EAAe,SACX,EAAA,MAAA,CAAO,OAAK,CAAE,CAAA,IAAA,KAAS,UAAU,CAAA,CAClC,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,SAAS,KAAK,EAAC;AAC/B,IAAM,MAAA,gBAAA,GAAA,CACJ,MAAM,OAAQ,CAAA,GAAA;AAAA,MACZ,kBAAmB,CAAA,GAAA;AAAA,QAAI,SACrB,IAAK,CAAA,UAAA,CAAW,eAAe,GAAK,EAAA,EAAE,OAAO;AAAA;AAC/C,KAEF,EAAA,MAAA,CAAO,CAAC,MAAA,KAA6B,CAAC,MAAM,CAAA;AAE9C,IAAM,MAAA,SAAA,GAAA,CACJ,MAAM,OAAQ,CAAA,GAAA;AAAA,MACZ,gBAAA,CAAiB,GAAI,CAAA,OAAM,KAAS,KAAA;AAClC,QAAI,IAAA,KAAA,CAAM,SAAS,WAAa,EAAA;AAC9B,UAAM,MAAAW,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,UAAO,OAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,YACjC,EAAI,EAAA,KAAA,CAAM,QAAS,CAAA,WAAA,CAAYX,gCAAsB,CAAA;AAAA,YACrD,OAAO,QAAS,CAAA;AAAA,WACjB,CAAA;AAAA;AAEH,QAAO,OAAA,SAAA;AAAA,OACR;AAAA,KAEH,EAAA,MAAA,CAAO,CAAC,CAAA,KAAgC,CAAC,CAAC,CAAA;AAE5C,IAAM,MAAA,oBAAA,GAAuB,MAAM,IAAK,CAAA,mBAAA;AAAA,MACtC,SAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AACA,IAAM,MAAAW,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,IAAM,MAAA,OAAA,GAAU,MAAM,MAAO,CAAA,KAAA,CAAM,QAAQ,EAAE,EAAA,EAAI,QAAQ,CAAA;AACzD,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,gCAAgC,MAAM,CAAA,wBAAA;AAAA,OACxC;AACA,MAAA;AAAA;AAGF,IAAM,MAAA,kBAAA,uBAAyB,GAAsB,EAAA;AACrD,IAAA,IAAI,QAAQ,QAAU,EAAA;AACpB,MAAmB,kBAAA,CAAA,GAAA;AAAA,QACjB,OAAQ,CAAA,QAAA;AAAA,QACR,qBAAqB,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,MAAA,CAAO,SAAS,IAAI;AAAA,OACtD;AAAA;AAGF,IAAA,MAAM,gBAAgB,MAAMC,cAAA;AAAA,MAC1B,OAAA;AAAA,MACA,QAAS,CAAA,KAAA;AAAA,MACT,oBAAA;AAAA,MACA,kBAAA;AAAA,MACA,KAAK,OAAQ,CAAA;AAAA,KACf;AAEA,IAAI,IAAA,CAAC,aAAiB,IAAA,CAAC,aAAe,EAAA;AACpC,MAAO,MAAA,CAAA,KAAA,CAAM,CAA2C,wCAAA,EAAA,MAAM,CAAE,CAAA,CAAA;AAChE,MAAA;AAAA;AAGF,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,KAAK,oBAAqB,CAAA,CAAC,aAAa,CAAC,CAAA;AAC3D,IAAA,MAAM,EAAE,OAAQ,EAAA,GAAI,KAAK,uBAAwB,CAAA,CAAC,aAAa,CAAC,CAAA;AAEhE,IAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,MACnC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA;AAAA,MACA;AAAA,KACD,CAAA;AAAA;AACH,EAEA,MAAc,mBAAmB,OAIf,EAAA;AAChB,IAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,MAAM,MAAA,IAAIF,qBAAc,iBAAiB,CAAA;AAAA;AAG3C,IAAA,MAAM,MAAS,GAAA,OAAA,EAAS,MAAU,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA;AAC/C,IAAM,MAAA,QAAA,GAAW,KAAK,OAAQ,CAAA,QAAA;AAC9B,IAAA,MAAM,SAAS,OAAQ,CAAA,MAAA;AAEvB,IAAA,MAAM,SAAS,OAAQ,CAAA,YAAA,CAAa,aAAa,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AAC7D,IAAA,MAAM,UAAU,OAAQ,CAAA,YAAA,CAAa,aAAa,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AAE9D,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AAED,IAAM,MAAA;AAAA,MACJ,KAAA,EAAO,CAAC,aAAa;AAAA,KACvB,GAAI,MAAM,IAAA,CAAK,UAAW,CAAA,WAAA;AAAA,MACxB;AAAA,QACE,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,MAAA;AAAA,UACN,CAAC,CAAA,qBAAA,EAAwBV,gCAAsB,CAAA,CAAE,GAAG;AAAA;AACtD,OACF;AAAA,MACA,EAAE,KAAM;AAAA,KACV;AAEA,IAAM,MAAAW,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,IAAM,MAAA,OAAA,GAAU,MAAM,MAAO,CAAA,KAAA,CAAM,QAAQ,EAAE,EAAA,EAAI,QAAQ,CAAA;AACzD,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,gCAAgC,MAAM,CAAA,wBAAA;AAAA,OACxC;AACA,MAAA;AAAA;AAGF,IAAM,MAAAA,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,IAAA,MAAM,QAAY,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,MAC5C,EAAI,EAAA;AAAA,KACL,CAAA;AAED,IAAA,QAAA,CAAS,UAAU,MAAME,uBAAA;AAAA,MACvB,YAAY;AACV,QAAM,MAAAF,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,QAAA,OAAO,MAAO,CAAA,MAAA;AAAA,OAChB;AAAA,MACA,OAAA;AAAA,MACA,QAAA;AAAA,MACA;AAAA,QACE,eAAe,QAAS,CAAA;AAAA;AAC1B,KACF;AAEA,IAAA,IAAI,cAAgE,GAAA,IAAA;AAEpE,IAAA,MAAM,cAAe,MAAMG,eAAA;AAAA,MACzB,QAAA;AAAA,MACA,QAAS,CAAA,KAAA;AAAA,MACT,KAAK,OAAQ,CAAA;AAAA,KACf;AAEA,IAAA,IAAI,WAAa,EAAA;AACf,MAAiB,cAAA,GAAA;AAAA,QACf,GAAG,WAAA;AAAA,QACH,MAAQ,EAAA;AAAA,OACV;AAAA;AAGF,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAO,MAAA,CAAA,KAAA,CAAM,CAA6C,0CAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AACnE,MAAA;AAAA;AAGF,IAAM,MAAA,gBAAA,uBAAuB,GAAsB,EAAA;AAEnD,IAAA,MAAM,uBACH,GAAA,aAAA,CAAc,IAAM,EAAA,QAAA,IAAyB,EAAC;AAEjD,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,oBAAsB,EAAA;AAEtD,MAAA,uBAAA,CAAwB,IAAK,CAAA,cAAA,CAAe,MAAO,CAAA,QAAA,CAAS,IAAI,CAAA;AAAA,KAC3D,MAAA;AAEL,MAAA,MAAM,QAAQ,uBAAwB,CAAA,OAAA;AAAA,QACpC,cAAA,CAAe,OAAO,QAAS,CAAA;AAAA,OACjC;AACA,MAAA,IAAI,QAAQ,EAAI,EAAA;AACd,QAAwB,uBAAA,CAAA,MAAA,CAAO,OAAO,CAAC,CAAA;AAAA;AACzC;AAGF,IAAA,gBAAA,CAAiB,GAAI,CAAA,aAAA,CAAc,QAAS,CAAA,IAAA,EAAM,uBAAuB,CAAA;AAEzE,IAAA,MAAM,gBAAgB,MAAMF,cAAA;AAAA,MAC1B,OAAA;AAAA,MACA,QAAS,CAAA,KAAA;AAAA,MACT,CAAC,cAAc,CAAA;AAAA,MACf,gBAAA;AAAA,MACA,KAAK,OAAQ,CAAA;AAAA,KACf;AAEA,IAAI,IAAA,CAAC,aAAiB,IAAA,CAAC,aAAe,EAAA;AACpC,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,0CAA0C,MAAM,CAAA,8BAAA;AAAA,OAClD;AACA,MAAA;AAAA;AAGF,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,4CAA4C,OAAO,CAAA,8BAAA;AAAA,OACrD;AACA,MAAA;AAAA;AAGF,IAAA,MAAM,EAAE,KAAA,EAAU,GAAA,IAAA,CAAK,oBAAqB,CAAA;AAAA,MAC1C;AAAA,KACD,CAAA;AACD,IAAA,MAAM,EAAE,OAAA,EAAY,GAAA,IAAA,CAAK,uBAAwB,CAAA;AAAA,MAC/C;AAAA,KACD,CAAA;AAED,IAAM,MAAA,IAAA,CAAK,WAAW,aAAc,CAAA;AAAA,MAClC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAO,MAAA,CAAA,IAAA;AAAA,MACL,oDAAoD,OAAQ,CAAA,YAAA,CAAa,IAAI,CAAgB,aAAA,EAAA,MAAM,iBAAiB,OAAO,CAAA;AAAA,KAC7H;AAAA;AACF,EAEA,MAAc,aAAa,OAIT,EAAA;AAChB,IAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,MAAM,MAAA,IAAIF,qBAAc,iBAAiB,CAAA;AAAA;AAE3C,IAAA,MAAM,MAAS,GAAA,OAAA,EAAS,MAAU,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA;AAC/C,IAAM,MAAA,QAAA,GAAW,KAAK,OAAQ,CAAA,QAAA;AAC9B,IAAA,MAAM,SAAS,OAAQ,CAAA,MAAA;AACvB,IAAA,MAAM,YAAe,GAAA,OAAA,CAAQ,YAAa,CAAA,YAAA,CAAa,MAAM,GAAG,CAAA;AAEhE,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,oBAAsB,EAAA;AACtD,MAAA,MAAM,IAAK,CAAA,iBAAA;AAAA,QACT,YAAA;AAAA,QACA,OAAA;AAAA,QACA,MAAA;AAAA,QACA,QAAA;AAAA,QACA;AAAA,OACF;AAAA;AAEF,IAAI,IAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,KAAS,oBAAsB,EAAA;AACtD,MAAA,MAAM,IAAK,CAAA,iBAAA,CAAkB,YAAc,EAAA,MAAA,EAAQ,UAAU,MAAM,CAAA;AAAA;AACrE;AAIF,EAEA,MAAc,iBACZ,CAAA,YAAA,EACA,OAKA,EAAA,MAAA,EACA,UACA,MACA,EAAA;AAEA,IAAI,IAAA,YAAA,CAAa,WAAW,CAAG,EAAA;AAC7B,MAAM,MAAA,OAAA,GAAU,aAAa,CAAC,CAAA;AAC9B,MAAM,MAAAC,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,MAAM,MAAA,KAAA,GAAQ,MAAM,MAAO,CAAA,MAAA,CAAO,QAAQ,EAAE,EAAA,EAAI,SAAS,CAAA;AACzD,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAO,MAAA,CAAA,KAAA;AAAA,UACL,iCAAiC,OAAO,CAAA,yBAAA;AAAA,SAC1C;AACA,QAAA;AAAA;AAEF,MAAA,MAAM,cAAc,MAAMG,eAAA;AAAA,QACxB,KAAA;AAAA,QACA,QAAS,CAAA,KAAA;AAAA,QACT,KAAK,OAAQ,CAAA;AAAA,OACf;AACA,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAO,MAAA,CAAA,KAAA,CAAM,CAA6C,0CAAA,EAAA,OAAO,CAAE,CAAA,CAAA;AACnE,QAAA;AAAA;AAGF,MAAA,MAAM,EAAE,KAAM,EAAA,GAAI,KAAK,oBAAqB,CAAA,CAAC,WAAW,CAAC,CAAA;AAEzD,MAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,QACnC,IAAM,EAAA,OAAA;AAAA,QACN,KAAA;AAAA,QACA,SAAS;AAAC,OACX,CAAA;AACD,MAAO,MAAA,CAAA,IAAA;AAAA,QACL,CAA4B,yBAAA,EAAA,OAAA,CAAQ,YAAa,CAAA,IAAI,2BAA2B,OAAO,CAAA;AAAA,OACzF;AAAA,KACF,MAAA,IAES,YAAa,CAAA,MAAA,KAAW,CAAG,EAAA;AAClC,MAAM,MAAA,aAAA,GAAgB,aAAa,CAAC,CAAA;AACpC,MAAA,MAAM,aAAa,IAAK,CAAA,KAAA,CAAM,OAAQ,CAAA,YAAA,CAAa,cAAc,CAAE,CAAA,EAAA;AACnE,MAAM,MAAAH,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,MAAA,MAAM,cAAkB,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,QAClD,EAAI,EAAA;AAAA,OACL,CAAA;AACD,MAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,QAAO,MAAA,CAAA,KAAA;AAAA,UACL,wCAAwC,aAAa,CAAA,yBAAA;AAAA,SACvD;AACA,QAAA;AAAA;AAEF,MAAM,MAAAA,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,MAAA,MAAM,QAAY,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,QAC5C,EAAI,EAAA;AAAA,OACL,CAAA;AACD,MAAA,IAAI,CAAC,QAAU,EAAA;AACb,QAAO,MAAA,CAAA,KAAA;AAAA,UACL,oCAAoC,UAAU,CAAA,yBAAA;AAAA,SAChD;AACA,QAAA;AAAA;AAGF,MAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,QAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,QAC7D,cAAgB,EAAA;AAAA,OACjB,CAAA;AAGD,MAAM,MAAA;AAAA,QACJ,KAAA,EAAO,CAAC,oBAAoB;AAAA,OAC9B,GAAK,MAAM,IAAA,CAAK,UAAW,CAAA,WAAA;AAAA,QACzB;AAAA,UACE,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,OAAA;AAAA,YACN,CAAC,CAAA,qBAAA,EAAwBX,gCAAsB,CAAA,CAAE,GAAG;AAAA;AACtD,SACF;AAAA,QACA,EAAE,KAAM;AAAA,OACV;AAEA,MAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,QAAO,MAAA,CAAA,KAAA;AAAA,UACL,uDAAuD,aAAa,CAAA,yBAAA;AAAA,SACtE;AACA,QAAA;AAAA;AAGF,MAAM,MAAA,oBAAA,GAAuB,MAAM,IAAK,CAAA,mBAAA;AAAA,QACtC,CAAC,UAAU,cAAc,CAAA;AAAA,QACzB,QAAA;AAAA,QACA,MAAA;AAAA,QACA;AAAA,OACF;AAEA,MAAI,IAAA,oBAAA,CAAqB,WAAW,CAAG,EAAA;AACrC,QAAO,MAAA,CAAA,KAAA;AAAA,UACL,CAAA,mDAAA,EAAsD,aAAa,CAAA,iBAAA,EAAoB,UAAU,CAAA;AAAA,SACnG;AACA,QAAA;AAAA;AAGF,MAAM,MAAA,EAAE,KAAM,EAAA,GAAI,IAAK,CAAA,oBAAA;AAAA,QACrB,oBAAqB,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,MAAM;AAAA,OACxC;AACA,MAAA,MAAM,EAAE,OAAQ,EAAA,GAAI,KAAK,uBAAwB,CAAA,CAAC,oBAAoB,CAAC,CAAA;AACvE,MAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,QACnC,IAAM,EAAA,OAAA;AAAA,QACN,KAAA;AAAA,QACA;AAAA,OACD,CAAA;AACD,MAAO,MAAA,CAAA,IAAA;AAAA,QACL,6BAA6B,OAAQ,CAAA,YAAA,CAAa,IAAI,CAAoB,iBAAA,EAAA,UAAU,0BAA0B,aAAa,CAAA;AAAA,OAC7H;AAAA;AACF;AACF,EAEA,MAAc,iBAAA,CACZ,YACA,EAAA,MAAA,EACA,UACA,MACA,EAAA;AACA,IAAM,MAAA,OAAA,GAAU,aAAa,CAAC,CAAA;AAE9B,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AAED,IAAM,MAAA;AAAA,MACJ,KAAA,EAAO,CAAC,YAAY;AAAA,KACtB,GAAK,MAAM,IAAA,CAAK,UAAW,CAAA,WAAA;AAAA,MACzB;AAAA,QACE,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,OAAA;AAAA,UACN,CAAC,CAAA,qBAAA,EAAwBA,gCAAsB,CAAA,CAAE,GAAG;AAAA;AACtD,OACF;AAAA,MACA,EAAE,KAAM;AAAA,KACV;AAEA,IAAM,MAAA,eAAA,GAAkB,IAAK,CAAA,kBAAA,CAAmB,YAAY,CAAA;AAC5D,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,eAAA,CAAgB,YAAY,CAAA;AAEtD,IAAM,MAAA,eAAA,GAAkB,eACpB,GAAA,MAAM,IAAK,CAAA,UAAA,CAAW,eAAe,eAAiB,EAAA,EAAE,KAAM,EAAC,CAC/D,GAAA,SAAA;AAEJ,IAAA,MAAM,qBAAwB,GAAA,MAAM,IAAK,CAAA,iBAAA,CAAkB,YAAY,CAAA;AAEvE,IAAI,IAAA,SAAA;AACJ,IACE,IAAA,eAAA,IACA,eAAgB,CAAA,QAAA,IAChB,eAAgB,CAAA,QAAA,CAAS,eACzB,eAAgB,CAAA,QAAA,CAAS,WAAY,CAAAA,gCAAsB,CAC3D,EAAA;AACA,MAAM,MAAAW,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,MAAa,SAAA,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,QACvC,EAAI,EAAA,eAAA,CAAgB,QAAS,CAAA,WAAA,CAAYX,gCAAsB;AAAA,OAChE,CAAA;AAAA;AAGH,IAAA,MAAM,CAAC,eAAe,CAAI,GAAA,MAAM,IAAK,CAAA,mBAAA;AAAA,MACnC,CAAC,SAAS,CAAE,CAAA,MAAA,CAAO,CAAC,CAA0C,KAAA,CAAC,CAAC,CAAC,CAAA;AAAA,MACjE,QAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,MAAM,0BAA0B,IAAK,CAAA,sBAAA;AAAA,MACnC,YAAA;AAAA,MACA;AAAA,KACF;AAEA,IAAA,MAAM,EAAE,eAAA,EAAiB,eAAgB,EAAA,GACvC,MAAM,IAAK,CAAA,kCAAA;AAAA,MACT,uBAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA;AAAA,KACF;AAEF,IAAA,MAAM,EAAE,KAAA,EAAU,GAAA,IAAA,CAAK,oBAAqB,CAAA;AAAA,MAC1C,GAAI,eAAkB,GAAA,CAAC,eAAgB,CAAA,MAAM,IAAI,EAAC;AAAA,MAClD,GAAG;AAAA,KACJ,CAAA;AAED,IAAA,MAAM,EAAE,OAAA,EAAY,GAAA,IAAA,CAAK,uBAAwB,CAAA;AAAA,MAC/C,YAAA;AAAA,MACA,GAAI,eAAA,GAAkB,CAAC,eAAe,IAAI,EAAC;AAAA,MAC3C,GAAG,qBAAA;AAAA,MACH,GAAG;AAAA,KACJ,CAAA;AAED,IAAM,MAAA,IAAA,CAAK,WAAY,aAAc,CAAA;AAAA,MACnC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA;AAAA,MACA;AAAA,KACD,CAAA;AAED,IAAO,MAAA,CAAA,IAAA;AAAA,MACL,wDAAwD,OAAO,CAAA,kBAAA;AAAA,KACjE;AAAA;AACF,EAEQ,mBAAmB,KAAwC,EAAA;AACjE,IAAA,OAAO,MAAM,SAAW,EAAA,IAAA,CAAK,cAAY,QAAS,CAAA,IAAA,KAAS,SAAS,CAChE,EAAA,SAAA;AAAA;AACN,EAEQ,gBAAgB,KAA8B,EAAA;AACpD,IAAA,OACE,KAAM,CAAA,SAAA,EACF,MAAO,CAAA,CAAA,QAAA,KAAY,QAAS,CAAA,IAAA,KAAS,UAAU,CAAA,CAChD,GAAI,CAAA,CAAA,QAAA,KAAY,QAAS,CAAA,SAAS,KAAK,EAAC;AAAA;AAE/C,EAEA,MAAc,kBAAkB,IAAmC,EAAA;AACjE,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AACD,IAAM,MAAA,QAAA,GAAW,MAAM,OAAQ,CAAA,GAAA;AAAA,MAC7B,IAAA,CAAK,GAAI,CAAA,CAAA,GAAA,KAAO,IAAK,CAAA,UAAA,CAAW,eAAe,GAAK,EAAA,EAAE,KAAM,EAAC,CAAC;AAAA,KAChE;AACA,IAAA,OAAO,SAAS,MAAO,CAAA,CAAC,MAA6B,KAAA,CAAC,CAAC,MAAM,CAAA;AAAA;AAC/D,EAEQ,sBAAA,CACN,cACA,qBACuB,EAAA;AACvB,IAAA,MAAM,0BAAiD,IAAI,GAAA;AAAA,MACzD,YAAA,CAAa,WACT,MAAO,CAAA,CAAA,QAAA,KAAY,SAAS,IAAS,KAAA,WAAW,CACjD,CAAA,GAAA,CAAI,CAAY,QAAA,KAAA;AAAA,QACf,QAAS,CAAA,SAAA;AAAA,QACT;AAAA,UACE,CAAG,EAAA,YAAA,CAAa,IAAI,CAAA,CAAA,EAAI,YAAa,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA,EAAI,YAAa,CAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAG,WAAY;AAAA;AACtG,OACD,KAAK;AAAC,KACX;AAEA,IAAA,qBAAA,CAAsB,QAAQ,CAAY,QAAA,KAAA;AACxC,MAAM,MAAA,mBAAA,GAAsB,SAAS,SAAW,EAAA,MAAA;AAAA,QAC9C,CAAA,QAAA,KAAY,SAAS,IAAS,KAAA;AAAA,OAChC;AACA,MAAA,IAAI,mBAAqB,EAAA;AACvB,QAAA,mBAAA,CAAoB,QAAQ,CAAY,QAAA,KAAA;AACtC,UAAA,MAAM,iBACJ,uBAAwB,CAAA,GAAA,CAAI,QAAS,CAAA,SAAS,KAAK,EAAC;AACtD,UAAwB,uBAAA,CAAA,GAAA,CAAI,SAAS,SAAW,EAAA;AAAA,YAC9C,GAAG,cAAA;AAAA,YACH,CAAG,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,EAAI,QAAS,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA,EAAI,QAAS,CAAA,QAAA,CAAS,IAAI,CAAA,CAAA,CAAG,WAAY;AAAA,WACzF,CAAA;AAAA,SACF,CAAA;AAAA;AACH,KACD,CAAA;AAED,IAAO,OAAA,uBAAA;AAAA;AACT,EAEA,MAAc,kCAAA,CACZ,uBACA,EAAA,QAAA,EACA,QACA,MACmE,EAAA;AACnE,IAAA,MAAM,kBAA4B,EAAC;AACnC,IAAA,MAAM,kBAA4B,EAAC;AAEnC,IAAA,MAAM,EAAE,KAAM,EAAA,GAAI,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,qBAAsB,CAAA;AAAA,MAC9D,UAAY,EAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,KAAK,wBAAyB,EAAA;AAAA,MAC7D,cAAgB,EAAA;AAAA,KACjB,CAAA;AAED,IAAA,KAAA,MAAW,CAAC,aAAa,CAAK,IAAA,uBAAA,CAAwB,SAAW,EAAA;AAC/D,MAAM,MAAA,mBAAA,GAAsB,MAAM,IAAA,CAAK,UAAW,CAAA,cAAA;AAAA,QAChD,aAAA;AAAA,QACA,EAAC,KAAK;AAAA,OACR;AACA,MAAA,IAAI,mBAAqB,EAAA,QAAA,CAAS,WAAc,GAAAA,gCAAsB,CAAG,EAAA;AACvE,QAAA,eAAA,CAAgB,KAAK,mBAAmB,CAAA;AACxC,QAAM,MAAAW,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,QAAA,MAAM,gBAAmB,GAAA,MAAM,MAAO,CAAA,KAAA,CAAM,OAAQ,CAAA;AAAA,UAClD,EAAI,EAAA,mBAAA,CAAoB,QAAS,CAAA,WAAA,CAAYX,gCAAsB;AAAA,SACpE,CAAA;AACD,QAAA,IAAI,gBAAkB,EAAA;AACpB,UAAA,MAAM,YAAY,MAAMe,iBAAA;AAAA,YACtB,MAAM,OAAA,CAAQ,OAAQ,CAAA,MAAA,CAAO,KAAK,CAAA;AAAA,YAClC,mBAAA,CAAoB,QAAS,CAAA,WAAA,CAAYf,gCAAsB,CAAA;AAAA,YAC/D,QAAA;AAAA,YACA;AAAA,cACE,gBAAgB,QAAS,CAAA;AAAA;AAC3B,WACF;AAEA,UAAM,MAAA,oBAAA,GAAuB,MAAM,IAAK,CAAA,mBAAA;AAAA,YACtC,SAAA;AAAA,YACA,QAAA;AAAA,YACA,MAAA;AAAA,YACA;AAAA,WACF;AAEA,UAAM,MAAA,WAAA,GACJ,IAAK,CAAA,OAAA,CAAQ,eAAmB,IAAAgB,gCAAA;AAClC,UAAA,MAAM,MAAqB,GAAA;AAAA,YACzB,UAAY,EAAA,sBAAA;AAAA,YACZ,IAAM,EAAA,MAAA;AAAA,YACN,QAAU,EAAA;AAAA,cACR,MAAM,gBAAiB,CAAA,QAAA;AAAA,cACvB,WAAa,EAAA;AAAA,gBACX,CAAChB,gCAAsB,GAAG,gBAAiB,CAAA,EAAA;AAAA,gBAC3C,CAACiB,mCAAyB,GAAG,QAAS,CAAA;AAAA;AACxC,aACF;AAAA,YACA,IAAM,EAAA;AAAA,cACJ,OAAS,EAAA;AAAA,gBACP,OAAO,gBAAiB,CAAA,KAAA;AAAA,gBACxB,GAAI,gBAAA,CAAiB,SAAa,IAAA,gBAAA,CAAiB,QAC/C,GAAA;AAAA,kBACE,WAAa,EAAA;AAAA,oBACX,gBAAiB,CAAA,SAAA;AAAA,oBACjB,gBAAiB,CAAA;AAAA,mBAEhB,CAAA,MAAA,CAAO,OAAO,CAAA,CACd,KAAK,GAAG;AAAA,oBAEb;AAAC,eACP;AAAA,cACA,QAAA,EAAU,SAAU,CAAA,OAAA,CAAQ,CAAM,CAAA,KAAA,CAAA,EAAG,IAAO,GAAA,CAAC,CAAE,CAAA,IAAI,CAAI,GAAA,EAAG;AAAA;AAC5D,WACF;AAEA,UAAA,WAAA;AAAA,YACE,MAAA;AAAA,YACA,gBAAA;AAAA,YACA,QAAS,CAAA,KAAA;AAAA,YACT;AAAA,WACF;AAEA,UAAA,eAAA,CAAgB,KAAK,MAAM,CAAA;AAAA;AAC7B;AACF;AAEF,IAAO,OAAA,EAAE,iBAAiB,eAAgB,EAAA;AAAA;AAC5C,EAEA,MAAc,mBAAA,CACZ,SACA,EAAA,QAAA,EACA,QACA,MACmD,EAAA;AACnD,IAAA,IAAI,aAA8C,EAAC;AAEnD,IAAI,IAAA,aAAA;AAEJ,IAAI,IAAA;AACF,MAAgB,aAAA,GAAA,MAAMC,sBAAiB,MAAM,CAAA;AAAA,aACtC,KAAO,EAAA;AACd,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,mDAAmD,KAAK,CAAA;AAAA,OAC1D;AAAA;AAGF,IAAA,MAAM,sBAAsB,aAAiB,IAAA,EAAA;AAE7C,IAAA,IAAI,mBAAqB,EAAA;AACvB,MAAA,UAAA,GAAa,MAAMC,6BAAA;AAAA,QACjB,MAAA;AAAA,QACA,QAAA;AAAA,QACA,MAAA;AAAA,QACA;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAA,UAAA,GAAa,SAAU,CAAA,MAAA;AAAA,QACrB,CAAC,KAAK,CAAM,KAAA,GAAA,CAAI,OAAO,GAAGC,mBAAA,CAAe,CAAC,CAAC,CAAA;AAAA,QAC3C;AAAC,OACH;AAAA;AAGF,IAAM,MAAA,OAAA,GAAU,MAAM,OAAQ,CAAA,GAAA;AAAA,MAC5B,UAAA,CAAW,GAAI,CAAA,OAAM,CAAK,KAAA;AACxB,QAAA,CAAA,CAAE,UAAU,MAAMP,uBAAA;AAAA,UAChB,YAAY;AACV,YAAM,MAAAF,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,YAAA,OAAO,MAAO,CAAA,MAAA;AAAA,WAChB;AAAA,UACA,CAAE,CAAA,EAAA;AAAA,UACF,QAAA;AAAA,UACA;AAAA,YACE,eAAe,QAAS,CAAA;AAAA;AAC1B,SACF;AAEA,QAAA,IAAI,mBAAqB,EAAA;AACvB,UAAI,IAAA,CAAA,CAAE,gBAAiB,CAAG,EAAA;AACxB,YAAM,MAAAA,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,YAAA,CAAA,CAAE,SAAY,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,aAAc,CAAA;AAAA,cAC9C,UAAU,CAAE,CAAA,EAAA;AAAA,cACZ,KAAO,EAAA,CAAA;AAAA,cACP,KAAK,CAAE,CAAA,aAAA;AAAA,cACP,mBACE,EAAA,IAAA,CAAK,OAAQ,CAAA,QAAA,CAAS,mBACtB,IAAAU,+CAAA;AAAA,cACF,OAAO,QAAS,CAAA;AAAA,aACjB,CAAA;AAAA;AAEH,UAAA,IAAI,EAAE,QAAU,EAAA;AACd,YAAM,MAAAV,6BAAA,CAAiB,MAAQ,EAAA,QAAA,EAAU,MAAM,CAAA;AAC/C,YAAA,MAAM,WAAc,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,OAAQ,CAAA;AAAA,cAC9C,IAAI,CAAE,CAAA,QAAA;AAAA,cACN,OAAO,QAAS,CAAA;AAAA,aACjB,CAAA;AACD,YAAA,CAAA,CAAE,SAAS,WAAa,EAAA,IAAA;AAAA;AAC1B;AAGF,QAAO,OAAA,CAAA;AAAA,OACR;AAAA,KACH;AAEA,IAAM,MAAA,YAAA,GAAe,MAAM,OAAQ,CAAA,GAAA;AAAA,MACjC,OAAA,CAAQ,GAAI,CAAA,OAAM,CAAK,KAAA;AACrB,QAAI,IAAA,CAAC,GAAU,OAAA,IAAA;AACf,QAAA,MAAM,SAAS,MAAMG,eAAA;AAAA,UACnB,CAAA;AAAA,UACA,QAAS,CAAA,KAAA;AAAA,UACT,KAAK,OAAQ,CAAA;AAAA,SACf;AACA,QAAA,IAAI,MAAQ,EAAA;AACV,UAAO,OAAA;AAAA,YACL,GAAG,CAAA;AAAA,YACH;AAAA,WACF;AAAA;AAEF,QAAO,OAAA,IAAA;AAAA,OACR;AAAA,KACH;AACA,IAAA,OAAO,YAAa,CAAA,MAAA;AAAA,MAClB,CAAC,UACC,KAAU,KAAA;AAAA,KACd;AAAA;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,KAAK,OAA6D,EAAA;AACtE,IAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,MAAM,MAAA,IAAIJ,qBAAc,iBAAiB,CAAA;AAAA;AAG3C,IAAA,MAAM,MAAS,GAAA,OAAA,EAAS,MAAU,IAAA,IAAA,CAAK,OAAQ,CAAA,MAAA;AAC/C,IAAM,MAAA,QAAA,GAAW,KAAK,OAAQ,CAAA,QAAA;AAE9B,IAAA,MAAM,EAAE,gBAAA,EAAqB,GAAA,aAAA,CAAc,MAAM,CAAA;AACjD,IAAM,MAAA,yBAAA,GAA4B,MAAM,OACtC,iCACF,CAAA;AACA,IAAA,MAAM,sBAAsB,yBAA0B,CAAA,OAAA;AAEtD,IAAM,MAAA,aAAA,GAAgB,IAAI,mBAAoB,CAAA;AAAA,MAC5C,SAAS,QAAS,CAAA,OAAA;AAAA,MAClB,WAAW,QAAS,CAAA;AAAA,KACrB,CAAA;AACD,IAAM,MAAAD,yBAAA,CAAa,aAAe,EAAA,QAAA,EAAU,MAAM,CAAA;AAElD,IAAM,MAAA,eAAA,GAAkB,MAAM,OAAO,SAAS,CAAA;AAC9C,IAAA,MAAM,YAAY,eAAgB,CAAA,OAAA;AAClC,IAAM,MAAA,WAAA,GAAc,SAAS,cAAkB,IAAA,EAAA;AAC/C,IAAM,MAAA,KAAA,GAAuB,UAAU,WAAW,CAAA;AAElD,IAAM,MAAA,uBAAA,GAA0B,KAAK,KAAM,CAAA,aAAA;AAAA,MACzC,iDAAA;AAAA,MACA;AAAA,QACE,WACE,EAAA;AAAA;AACJ,KACF;AACA,IAAA,MAAM,EAAE,KAAA,EAAO,MAAO,EAAA,GAAI,MAAMa,sBAAA;AAAA,MAC9B,aAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,KAAA;AAAA,MACA,OAAQ,CAAA,cAAA;AAAA,MACR,uBAAA;AAAA,MACA;AAAA,QACE,eAAe,QAAS,CAAA,aAAA;AAAA,QACxB,gBAAgB,QAAS,CAAA,cAAA;AAAA,QACzB,eAAA,EAAiB,KAAK,OAAQ,CAAA,eAAA;AAAA,QAC9B,gBAAA,EAAkB,KAAK,OAAQ,CAAA;AAAA;AACjC,KACF;AAEA,IAAA,MAAM,EAAE,kBAAmB,EAAA,GAAI,iBAAiB,EAAE,KAAA,EAAO,QAAQ,CAAA;AAEjE,IAAM,MAAA,IAAA,CAAK,WAAW,aAAc,CAAA;AAAA,MAClC,IAAM,EAAA,MAAA;AAAA,MACN,QAAA,EAAU,CAAC,GAAG,KAAA,EAAO,GAAG,MAAM,CAAA,CAAE,IAAI,CAAW,MAAA,MAAA;AAAA,QAC7C,WAAa,EAAA,CAAA,sBAAA,EAAyB,IAAK,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA,QACrD,QAAQ,aAAc,CAAA,QAAA,CAAS,OAAS,EAAA,QAAA,CAAS,OAAO,MAAM;AAAA,OAC9D,CAAA;AAAA,KACH,CAAA;AAED,IAAmB,kBAAA,EAAA;AAAA;AACrB;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,UAAwC,EAAA;AAC/C,IAAA,IAAA,CAAK,aAAa,YAAY;AAC5B,MAAA,MAAM,EAAK,GAAA,CAAA,EAAG,IAAK,CAAA,eAAA,EAAiB,CAAA,QAAA,CAAA;AACpC,MAAA,MAAM,WAAW,GAAI,CAAA;AAAA,QACnB,EAAA;AAAA,QACA,IAAI,YAAY;AACd,UAAM,MAAA,cAAA,GAAiBC,gBAAK,EAAG,EAAA;AAC/B,UAAA,MAAM,MAAS,GAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAM,CAAA;AAAA,YACvC,KAAA,EAAO,yBAA0B,CAAA,SAAA,CAAU,WAAY,CAAA,IAAA;AAAA,YACvD,MAAQ,EAAA,EAAA;AAAA,YACR;AAAA,WACD,CAAA;AAED,UAAI,IAAA;AACF,YAAA,MAAM,IAAK,CAAA,IAAA,CAAK,EAAE,MAAA,EAAQ,gBAAgB,CAAA;AAAA,mBACnC,KAAO,EAAA;AACd,YAAA,IAAA,CAAK,OAAQ,CAAA,GAAA,CAAI,CAAG,EAAA,EAAE,gBAAgC,CAAA;AACtD,YAAI,IAAAC,cAAA,CAAQ,KAAK,CAAG,EAAA;AAElB,cAAA,MAAA,CAAO,MAAM,+CAAiD,EAAA;AAAA;AAAA,gBAE5D,MAAM,KAAM,CAAA,IAAA;AAAA,gBACZ,OAAO,KAAM,CAAA,KAAA;AAAA,gBACb,SAAS,KAAM,CAAA,OAAA;AAAA,gBACf,OAAO,KAAM,CAAA,KAAA;AAAA;AAAA,gBAEb,MAAA,EAAS,MAAM,QAAkC,EAAA;AAAA,eAClD,CAAA;AAAA;AACH;AACF;AACF,OACD,CAAA;AAAA,KACH;AAAA;AAEJ;AAGA,SAAS,cAAc,MAAuB,EAAA;AAC5C,EAAI,IAAA,SAAA,GAAY,KAAK,GAAI,EAAA;AACzB,EAAI,IAAA,OAAA;AAEJ,EAAA,MAAA,CAAO,KAAK,mCAAmC,CAAA;AAE/C,EAAA,SAAS,iBAAiB,IAA+C,EAAA;AACvE,IAAA,OAAA,GAAU,GAAG,IAAK,CAAA,KAAA,CAAM,MAAM,CAAuB,oBAAA,EAAA,IAAA,CAAK,OAAO,MAAM,CAAA,gBAAA,CAAA;AACvE,IAAA,MAAM,iBAAiB,IAAK,CAAA,GAAA,KAAQ,SAAa,IAAA,GAAA,EAAM,QAAQ,CAAC,CAAA;AAChE,IAAA,SAAA,GAAY,KAAK,GAAI,EAAA;AACrB,IAAA,MAAA,CAAO,IAAK,CAAA,CAAA,KAAA,EAAQ,OAAO,CAAA,IAAA,EAAO,YAAY,CAAyB,uBAAA,CAAA,CAAA;AACvE,IAAA,OAAO,EAAE,kBAAmB,EAAA;AAAA;AAG9B,EAAA,SAAS,kBAAqB,GAAA;AAC5B,IAAA,MAAM,mBAAmB,IAAK,CAAA,GAAA,KAAQ,SAAa,IAAA,GAAA,EAAM,QAAQ,CAAC,CAAA;AAClE,IAAA,MAAA,CAAO,IAAK,CAAA,CAAA,UAAA,EAAa,OAAO,CAAA,IAAA,EAAO,cAAc,CAAW,SAAA,CAAA,CAAA;AAAA;AAGlE,EAAA,OAAO,EAAE,gBAAiB,EAAA;AAC5B;;;;;"}